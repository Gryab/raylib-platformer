!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	C:/c++/todo-raylib/raylib-game-template-main/projects/VS2022/raylib_todo/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	/80ee839/
APIENTRY	rlgl.h	/^                #define APIENTRY /;"	d
APIENTRY	rlgl.h	/^                #define APIENTRY$/;"	d
AudioCallback	raylib.h	/^typedef void (*AudioCallback)(void *bufferData, unsigned int frames);$/;"	t	typeref:typename:void (*)(void * bufferData,unsigned int frames)
AudioStream	raylib.h	/^typedef struct AudioStream {$/;"	s
AudioStream	raylib.h	/^} AudioStream;$/;"	t	typeref:struct:AudioStream
AutomationEvent	raylib.h	/^typedef struct AutomationEvent {$/;"	s
AutomationEvent	raylib.h	/^} AutomationEvent;$/;"	t	typeref:struct:AutomationEvent
AutomationEventList	raylib.h	/^typedef struct AutomationEventList {$/;"	s
AutomationEventList	raylib.h	/^} AutomationEventList;$/;"	t	typeref:struct:AutomationEventList
BEIGE	raylib.h	/^#define BEIGE /;"	d
BLACK	raylib.h	/^#define BLACK /;"	d
BLANK	raylib.h	/^#define BLANK /;"	d
BLEND_ADDITIVE	raylib.h	/^    BLEND_ADDITIVE,                 \/\/ Blend textures adding colors$/;"	e	enum:__anonfdf2e0de1203
BLEND_ADD_COLORS	raylib.h	/^    BLEND_ADD_COLORS,               \/\/ Blend textures adding colors (alternative)$/;"	e	enum:__anonfdf2e0de1203
BLEND_ALPHA	raylib.h	/^    BLEND_ALPHA = 0,                \/\/ Blend textures considering alpha (default)$/;"	e	enum:__anonfdf2e0de1203
BLEND_ALPHA_PREMULTIPLY	raylib.h	/^    BLEND_ALPHA_PREMULTIPLY,        \/\/ Blend premultiplied textures considering alpha$/;"	e	enum:__anonfdf2e0de1203
BLEND_CUSTOM	raylib.h	/^    BLEND_CUSTOM,                   \/\/ Blend textures using custom src\/dst factors (use rlSet/;"	e	enum:__anonfdf2e0de1203
BLEND_CUSTOM_SEPARATE	raylib.h	/^    BLEND_CUSTOM_SEPARATE           \/\/ Blend textures using custom rgb\/alpha separate src\/ds/;"	e	enum:__anonfdf2e0de1203
BLEND_MULTIPLIED	raylib.h	/^    BLEND_MULTIPLIED,               \/\/ Blend textures multiplying colors$/;"	e	enum:__anonfdf2e0de1203
BLEND_SUBTRACT_COLORS	raylib.h	/^    BLEND_SUBTRACT_COLORS,          \/\/ Blend textures subtracting colors (alternative)$/;"	e	enum:__anonfdf2e0de1203
BLUE	raylib.h	/^#define BLUE /;"	d
BROWN	raylib.h	/^#define BROWN /;"	d
BlendMode	raylib.h	/^} BlendMode;$/;"	t	typeref:enum:__anonfdf2e0de1203
BoneInfo	raylib.h	/^typedef struct BoneInfo {$/;"	s
BoneInfo	raylib.h	/^} BoneInfo;$/;"	t	typeref:struct:BoneInfo
BoundingBox	raylib.h	/^typedef struct BoundingBox {$/;"	s
BoundingBox	raylib.h	/^} BoundingBox;$/;"	t	typeref:struct:BoundingBox
CAMERA_CUSTOM	raylib.h	/^    CAMERA_CUSTOM = 0,              \/\/ Custom camera$/;"	e	enum:__anonfdf2e0de1403
CAMERA_FIRST_PERSON	raylib.h	/^    CAMERA_FIRST_PERSON,            \/\/ First person camera$/;"	e	enum:__anonfdf2e0de1403
CAMERA_FREE	raylib.h	/^    CAMERA_FREE,                    \/\/ Free camera$/;"	e	enum:__anonfdf2e0de1403
CAMERA_ORBITAL	raylib.h	/^    CAMERA_ORBITAL,                 \/\/ Orbital camera$/;"	e	enum:__anonfdf2e0de1403
CAMERA_ORTHOGRAPHIC	raylib.h	/^    CAMERA_ORTHOGRAPHIC             \/\/ Orthographic projection$/;"	e	enum:__anonfdf2e0de1503
CAMERA_PERSPECTIVE	raylib.h	/^    CAMERA_PERSPECTIVE = 0,         \/\/ Perspective projection$/;"	e	enum:__anonfdf2e0de1503
CAMERA_THIRD_PERSON	raylib.h	/^    CAMERA_THIRD_PERSON             \/\/ Third person camera$/;"	e	enum:__anonfdf2e0de1403
CLITERAL	raylib.h	/^    #define CLITERAL(/;"	d
CUBEMAP_LAYOUT_AUTO_DETECT	raylib.h	/^    CUBEMAP_LAYOUT_AUTO_DETECT = 0,         \/\/ Automatically detect layout type$/;"	e	enum:__anonfdf2e0de1003
CUBEMAP_LAYOUT_CROSS_FOUR_BY_THREE	raylib.h	/^    CUBEMAP_LAYOUT_CROSS_FOUR_BY_THREE,     \/\/ Layout is defined by a 4x3 cross with cubemap f/;"	e	enum:__anonfdf2e0de1003
CUBEMAP_LAYOUT_CROSS_THREE_BY_FOUR	raylib.h	/^    CUBEMAP_LAYOUT_CROSS_THREE_BY_FOUR,     \/\/ Layout is defined by a 3x4 cross with cubemap f/;"	e	enum:__anonfdf2e0de1003
CUBEMAP_LAYOUT_LINE_HORIZONTAL	raylib.h	/^    CUBEMAP_LAYOUT_LINE_HORIZONTAL,         \/\/ Layout is defined by a horizontal line with fac/;"	e	enum:__anonfdf2e0de1003
CUBEMAP_LAYOUT_LINE_VERTICAL	raylib.h	/^    CUBEMAP_LAYOUT_LINE_VERTICAL,           \/\/ Layout is defined by a vertical line with faces$/;"	e	enum:__anonfdf2e0de1003
CUBEMAP_LAYOUT_PANORAMA	raylib.h	/^    CUBEMAP_LAYOUT_PANORAMA                 \/\/ Layout is defined by a panorama image (equirrec/;"	e	enum:__anonfdf2e0de1003
Camera	raylib.h	/^typedef Camera3D Camera;    \/\/ Camera type fallback, defaults to Camera3D$/;"	t	typeref:typename:Camera3D
Camera2D	raylib.h	/^typedef struct Camera2D {$/;"	s
Camera2D	raylib.h	/^} Camera2D;$/;"	t	typeref:struct:Camera2D
Camera3D	raylib.h	/^typedef struct Camera3D {$/;"	s
Camera3D	raylib.h	/^} Camera3D;$/;"	t	typeref:struct:Camera3D
CameraMode	raylib.h	/^} CameraMode;$/;"	t	typeref:enum:__anonfdf2e0de1403
CameraProjection	raylib.h	/^} CameraProjection;$/;"	t	typeref:enum:__anonfdf2e0de1503
Clamp	raymath.h	/^RMAPI float Clamp(float value, float min, float max)$/;"	f	typeref:typename:RMAPI float
Color	raylib.h	/^typedef struct Color {$/;"	s
Color	raylib.h	/^} Color;$/;"	t	typeref:struct:Color
ConfigFlags	raylib.h	/^} ConfigFlags;$/;"	t	typeref:enum:__anonfdf2e0de0203
CubemapLayout	raylib.h	/^} CubemapLayout;$/;"	t	typeref:enum:__anonfdf2e0de1003
DARKBLUE	raylib.h	/^#define DARKBLUE /;"	d
DARKBROWN	raylib.h	/^#define DARKBROWN /;"	d
DARKGRAY	raylib.h	/^#define DARKGRAY /;"	d
DARKGREEN	raylib.h	/^#define DARKGREEN /;"	d
DARKPURPLE	raylib.h	/^#define DARKPURPLE /;"	d
DEG2RAD	raylib.h	/^    #define DEG2RAD /;"	d
DEG2RAD	raymath.h	/^    #define DEG2RAD /;"	d
DEG2RAD	rlgl.h	/^    #define DEG2RAD /;"	d
EPSILON	raymath.h	/^    #define EPSILON /;"	d
ExtSupported	rlgl.h	/^    } ExtSupported;     \/\/ Extensions supported flags$/;"	m	struct:rlglData	typeref:struct:rlglData::__anon19a7bfac0e08
FLAG_BORDERLESS_WINDOWED_MODE	raylib.h	/^    FLAG_BORDERLESS_WINDOWED_MODE = 0x00008000, \/\/ Set to run program in borderless windowed m/;"	e	enum:__anonfdf2e0de0203
FLAG_FULLSCREEN_MODE	raylib.h	/^    FLAG_FULLSCREEN_MODE    = 0x00000002,   \/\/ Set to run program in fullscreen$/;"	e	enum:__anonfdf2e0de0203
FLAG_INTERLACED_HINT	raylib.h	/^    FLAG_INTERLACED_HINT    = 0x00010000    \/\/ Set to try enabling interlaced video format (fo/;"	e	enum:__anonfdf2e0de0203
FLAG_MSAA_4X_HINT	raylib.h	/^    FLAG_MSAA_4X_HINT       = 0x00000020,   \/\/ Set to try enabling MSAA 4X$/;"	e	enum:__anonfdf2e0de0203
FLAG_VSYNC_HINT	raylib.h	/^    FLAG_VSYNC_HINT         = 0x00000040,   \/\/ Set to try enabling V-Sync on GPU$/;"	e	enum:__anonfdf2e0de0203
FLAG_WINDOW_ALWAYS_RUN	raylib.h	/^    FLAG_WINDOW_ALWAYS_RUN  = 0x00000100,   \/\/ Set to allow windows running while minimized$/;"	e	enum:__anonfdf2e0de0203
FLAG_WINDOW_HIDDEN	raylib.h	/^    FLAG_WINDOW_HIDDEN      = 0x00000080,   \/\/ Set to hide window$/;"	e	enum:__anonfdf2e0de0203
FLAG_WINDOW_HIGHDPI	raylib.h	/^    FLAG_WINDOW_HIGHDPI     = 0x00002000,   \/\/ Set to support HighDPI$/;"	e	enum:__anonfdf2e0de0203
FLAG_WINDOW_MAXIMIZED	raylib.h	/^    FLAG_WINDOW_MAXIMIZED   = 0x00000400,   \/\/ Set to maximize window (expanded to monitor)$/;"	e	enum:__anonfdf2e0de0203
FLAG_WINDOW_MINIMIZED	raylib.h	/^    FLAG_WINDOW_MINIMIZED   = 0x00000200,   \/\/ Set to minimize window (iconify)$/;"	e	enum:__anonfdf2e0de0203
FLAG_WINDOW_MOUSE_PASSTHROUGH	raylib.h	/^    FLAG_WINDOW_MOUSE_PASSTHROUGH = 0x00004000, \/\/ Set to support mouse passthrough, only supp/;"	e	enum:__anonfdf2e0de0203
FLAG_WINDOW_RESIZABLE	raylib.h	/^    FLAG_WINDOW_RESIZABLE   = 0x00000004,   \/\/ Set to allow resizable window$/;"	e	enum:__anonfdf2e0de0203
FLAG_WINDOW_TOPMOST	raylib.h	/^    FLAG_WINDOW_TOPMOST     = 0x00001000,   \/\/ Set to window always on top$/;"	e	enum:__anonfdf2e0de0203
FLAG_WINDOW_TRANSPARENT	raylib.h	/^    FLAG_WINDOW_TRANSPARENT = 0x00000010,   \/\/ Set to allow transparent framebuffer$/;"	e	enum:__anonfdf2e0de0203
FLAG_WINDOW_UNDECORATED	raylib.h	/^    FLAG_WINDOW_UNDECORATED = 0x00000008,   \/\/ Set to disable window decoration (frame and but/;"	e	enum:__anonfdf2e0de0203
FLAG_WINDOW_UNFOCUSED	raylib.h	/^    FLAG_WINDOW_UNFOCUSED   = 0x00000800,   \/\/ Set to window non focused$/;"	e	enum:__anonfdf2e0de0203
FONT_BITMAP	raylib.h	/^    FONT_BITMAP,                    \/\/ Bitmap font generation, no anti-aliasing$/;"	e	enum:__anonfdf2e0de1103
FONT_DEFAULT	raylib.h	/^    FONT_DEFAULT = 0,               \/\/ Default font generation, anti-aliased$/;"	e	enum:__anonfdf2e0de1103
FONT_SDF	raylib.h	/^    FONT_SDF                        \/\/ SDF font generation, requires external shader$/;"	e	enum:__anonfdf2e0de1103
FilePathList	raylib.h	/^typedef struct FilePathList {$/;"	s
FilePathList	raylib.h	/^} FilePathList;$/;"	t	typeref:struct:FilePathList
FloatEquals	raymath.h	/^RMAPI int FloatEquals(float x, float y)$/;"	f	typeref:typename:RMAPI int
Font	raylib.h	/^typedef struct Font {$/;"	s
Font	raylib.h	/^} Font;$/;"	t	typeref:struct:Font
FontType	raylib.h	/^} FontType;$/;"	t	typeref:enum:__anonfdf2e0de1103
GAMEPAD_AXIS_LEFT_TRIGGER	raylib.h	/^    GAMEPAD_AXIS_LEFT_TRIGGER  = 4,     \/\/ Gamepad back trigger left, pressure level: [1..-1]$/;"	e	enum:__anonfdf2e0de0803
GAMEPAD_AXIS_LEFT_X	raylib.h	/^    GAMEPAD_AXIS_LEFT_X        = 0,     \/\/ Gamepad left stick X axis$/;"	e	enum:__anonfdf2e0de0803
GAMEPAD_AXIS_LEFT_Y	raylib.h	/^    GAMEPAD_AXIS_LEFT_Y        = 1,     \/\/ Gamepad left stick Y axis$/;"	e	enum:__anonfdf2e0de0803
GAMEPAD_AXIS_RIGHT_TRIGGER	raylib.h	/^    GAMEPAD_AXIS_RIGHT_TRIGGER = 5      \/\/ Gamepad back trigger right, pressure level: [1..-1]$/;"	e	enum:__anonfdf2e0de0803
GAMEPAD_AXIS_RIGHT_X	raylib.h	/^    GAMEPAD_AXIS_RIGHT_X       = 2,     \/\/ Gamepad right stick X axis$/;"	e	enum:__anonfdf2e0de0803
GAMEPAD_AXIS_RIGHT_Y	raylib.h	/^    GAMEPAD_AXIS_RIGHT_Y       = 3,     \/\/ Gamepad right stick Y axis$/;"	e	enum:__anonfdf2e0de0803
GAMEPAD_BUTTON_LEFT_FACE_DOWN	raylib.h	/^    GAMEPAD_BUTTON_LEFT_FACE_DOWN,      \/\/ Gamepad left DPAD down button$/;"	e	enum:__anonfdf2e0de0703
GAMEPAD_BUTTON_LEFT_FACE_LEFT	raylib.h	/^    GAMEPAD_BUTTON_LEFT_FACE_LEFT,      \/\/ Gamepad left DPAD left button$/;"	e	enum:__anonfdf2e0de0703
GAMEPAD_BUTTON_LEFT_FACE_RIGHT	raylib.h	/^    GAMEPAD_BUTTON_LEFT_FACE_RIGHT,     \/\/ Gamepad left DPAD right button$/;"	e	enum:__anonfdf2e0de0703
GAMEPAD_BUTTON_LEFT_FACE_UP	raylib.h	/^    GAMEPAD_BUTTON_LEFT_FACE_UP,        \/\/ Gamepad left DPAD up button$/;"	e	enum:__anonfdf2e0de0703
GAMEPAD_BUTTON_LEFT_THUMB	raylib.h	/^    GAMEPAD_BUTTON_LEFT_THUMB,          \/\/ Gamepad joystick pressed button left$/;"	e	enum:__anonfdf2e0de0703
GAMEPAD_BUTTON_LEFT_TRIGGER_1	raylib.h	/^    GAMEPAD_BUTTON_LEFT_TRIGGER_1,      \/\/ Gamepad top\/back trigger left (first), it could be/;"	e	enum:__anonfdf2e0de0703
GAMEPAD_BUTTON_LEFT_TRIGGER_2	raylib.h	/^    GAMEPAD_BUTTON_LEFT_TRIGGER_2,      \/\/ Gamepad top\/back trigger left (second), it could b/;"	e	enum:__anonfdf2e0de0703
GAMEPAD_BUTTON_MIDDLE	raylib.h	/^    GAMEPAD_BUTTON_MIDDLE,              \/\/ Gamepad center buttons, middle one (i.e. PS3: PS, X/;"	e	enum:__anonfdf2e0de0703
GAMEPAD_BUTTON_MIDDLE_LEFT	raylib.h	/^    GAMEPAD_BUTTON_MIDDLE_LEFT,         \/\/ Gamepad center buttons, left one (i.e. PS3: Select)$/;"	e	enum:__anonfdf2e0de0703
GAMEPAD_BUTTON_MIDDLE_RIGHT	raylib.h	/^    GAMEPAD_BUTTON_MIDDLE_RIGHT,        \/\/ Gamepad center buttons, right one (i.e. PS3: Start)$/;"	e	enum:__anonfdf2e0de0703
GAMEPAD_BUTTON_RIGHT_FACE_DOWN	raylib.h	/^    GAMEPAD_BUTTON_RIGHT_FACE_DOWN,     \/\/ Gamepad right button down (i.e. PS3: Cross, Xbox: A/;"	e	enum:__anonfdf2e0de0703
GAMEPAD_BUTTON_RIGHT_FACE_LEFT	raylib.h	/^    GAMEPAD_BUTTON_RIGHT_FACE_LEFT,     \/\/ Gamepad right button left (i.e. PS3: Circle, Xbox: /;"	e	enum:__anonfdf2e0de0703
GAMEPAD_BUTTON_RIGHT_FACE_RIGHT	raylib.h	/^    GAMEPAD_BUTTON_RIGHT_FACE_RIGHT,    \/\/ Gamepad right button right (i.e. PS3: Square, Xbox:/;"	e	enum:__anonfdf2e0de0703
GAMEPAD_BUTTON_RIGHT_FACE_UP	raylib.h	/^    GAMEPAD_BUTTON_RIGHT_FACE_UP,       \/\/ Gamepad right button up (i.e. PS3: Triangle, Xbox: /;"	e	enum:__anonfdf2e0de0703
GAMEPAD_BUTTON_RIGHT_THUMB	raylib.h	/^    GAMEPAD_BUTTON_RIGHT_THUMB          \/\/ Gamepad joystick pressed button right$/;"	e	enum:__anonfdf2e0de0703
GAMEPAD_BUTTON_RIGHT_TRIGGER_1	raylib.h	/^    GAMEPAD_BUTTON_RIGHT_TRIGGER_1,     \/\/ Gamepad top\/back trigger right (one), it could be /;"	e	enum:__anonfdf2e0de0703
GAMEPAD_BUTTON_RIGHT_TRIGGER_2	raylib.h	/^    GAMEPAD_BUTTON_RIGHT_TRIGGER_2,     \/\/ Gamepad top\/back trigger right (second), it could /;"	e	enum:__anonfdf2e0de0703
GAMEPAD_BUTTON_UNKNOWN	raylib.h	/^    GAMEPAD_BUTTON_UNKNOWN = 0,         \/\/ Unknown button, just for error checking$/;"	e	enum:__anonfdf2e0de0703
GESTURE_DOUBLETAP	raylib.h	/^    GESTURE_DOUBLETAP   = 2,        \/\/ Double tap gesture$/;"	e	enum:__anonfdf2e0de1303
GESTURE_DRAG	raylib.h	/^    GESTURE_DRAG        = 8,        \/\/ Drag gesture$/;"	e	enum:__anonfdf2e0de1303
GESTURE_HOLD	raylib.h	/^    GESTURE_HOLD        = 4,        \/\/ Hold gesture$/;"	e	enum:__anonfdf2e0de1303
GESTURE_NONE	raylib.h	/^    GESTURE_NONE        = 0,        \/\/ No gesture$/;"	e	enum:__anonfdf2e0de1303
GESTURE_PINCH_IN	raylib.h	/^    GESTURE_PINCH_IN    = 256,      \/\/ Pinch in gesture$/;"	e	enum:__anonfdf2e0de1303
GESTURE_PINCH_OUT	raylib.h	/^    GESTURE_PINCH_OUT   = 512       \/\/ Pinch out gesture$/;"	e	enum:__anonfdf2e0de1303
GESTURE_SWIPE_DOWN	raylib.h	/^    GESTURE_SWIPE_DOWN  = 128,      \/\/ Swipe down gesture$/;"	e	enum:__anonfdf2e0de1303
GESTURE_SWIPE_LEFT	raylib.h	/^    GESTURE_SWIPE_LEFT  = 32,       \/\/ Swipe left gesture$/;"	e	enum:__anonfdf2e0de1303
GESTURE_SWIPE_RIGHT	raylib.h	/^    GESTURE_SWIPE_RIGHT = 16,       \/\/ Swipe right gesture$/;"	e	enum:__anonfdf2e0de1303
GESTURE_SWIPE_UP	raylib.h	/^    GESTURE_SWIPE_UP    = 64,       \/\/ Swipe up gesture$/;"	e	enum:__anonfdf2e0de1303
GESTURE_TAP	raylib.h	/^    GESTURE_TAP         = 1,        \/\/ Tap gesture$/;"	e	enum:__anonfdf2e0de1303
GLAD_FREE	rlgl.h	/^    #define GLAD_FREE /;"	d
GLAD_GLES2_IMPLEMENTATION	rlgl.h	/^        #define GLAD_GLES2_IMPLEMENTATION$/;"	d
GLAD_GL_IMPLEMENTATION	rlgl.h	/^    #define GLAD_GL_IMPLEMENTATION$/;"	d
GLAD_MALLOC	rlgl.h	/^    #define GLAD_MALLOC /;"	d
GL_COMPRESSED_RGB8_ETC2	rlgl.h	/^    #define GL_COMPRESSED_RGB8_ETC2 /;"	d
GL_COMPRESSED_RGBA8_ETC2_EAC	rlgl.h	/^    #define GL_COMPRESSED_RGBA8_ETC2_EAC /;"	d
GL_COMPRESSED_RGBA_ASTC_4x4_KHR	rlgl.h	/^    #define GL_COMPRESSED_RGBA_ASTC_4x4_KHR /;"	d
GL_COMPRESSED_RGBA_ASTC_8x8_KHR	rlgl.h	/^    #define GL_COMPRESSED_RGBA_ASTC_8x8_KHR /;"	d
GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG	rlgl.h	/^    #define GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG /;"	d
GL_COMPRESSED_RGBA_S3TC_DXT1_EXT	rlgl.h	/^    #define GL_COMPRESSED_RGBA_S3TC_DXT1_EXT /;"	d
GL_COMPRESSED_RGBA_S3TC_DXT3_EXT	rlgl.h	/^    #define GL_COMPRESSED_RGBA_S3TC_DXT3_EXT /;"	d
GL_COMPRESSED_RGBA_S3TC_DXT5_EXT	rlgl.h	/^    #define GL_COMPRESSED_RGBA_S3TC_DXT5_EXT /;"	d
GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG	rlgl.h	/^    #define GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG /;"	d
GL_COMPRESSED_RGB_S3TC_DXT1_EXT	rlgl.h	/^    #define GL_COMPRESSED_RGB_S3TC_DXT1_EXT /;"	d
GL_DRAW_FRAMEBUFFER	rlgl.h	/^        #define GL_DRAW_FRAMEBUFFER /;"	d
GL_ETC1_RGB8_OES	rlgl.h	/^    #define GL_ETC1_RGB8_OES /;"	d
GL_GLEXT_PROTOTYPES	rlgl.h	/^        #define GL_GLEXT_PROTOTYPES$/;"	d
GL_GLEXT_PROTOTYPES	rlgl.h	/^    #define GL_GLEXT_PROTOTYPES$/;"	d
GL_LUMINANCE	rlgl.h	/^    #define GL_LUMINANCE /;"	d
GL_LUMINANCE_ALPHA	rlgl.h	/^    #define GL_LUMINANCE_ALPHA /;"	d
GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT	rlgl.h	/^        #define GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT /;"	d
GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT	rlgl.h	/^    #define GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT /;"	d
GL_READ_FRAMEBUFFER	rlgl.h	/^        #define GL_READ_FRAMEBUFFER /;"	d
GL_SHADING_LANGUAGE_VERSION	rlgl.h	/^    #define GL_SHADING_LANGUAGE_VERSION /;"	d
GL_TEXTURE_MAX_ANISOTROPY_EXT	rlgl.h	/^    #define GL_TEXTURE_MAX_ANISOTROPY_EXT /;"	d
GL_UNSIGNED_SHORT_4_4_4_4	rlgl.h	/^    #define GL_UNSIGNED_SHORT_4_4_4_4 /;"	d
GL_UNSIGNED_SHORT_5_5_5_1	rlgl.h	/^    #define GL_UNSIGNED_SHORT_5_5_5_1 /;"	d
GL_UNSIGNED_SHORT_5_6_5	rlgl.h	/^    #define GL_UNSIGNED_SHORT_5_6_5 /;"	d
GOLD	raylib.h	/^#define GOLD /;"	d
GRAPHICS_API_OPENGL_33	rlgl.h	/^        #define GRAPHICS_API_OPENGL_33$/;"	d
GRAPHICS_API_OPENGL_33	rlgl.h	/^    #define GRAPHICS_API_OPENGL_33$/;"	d
GRAPHICS_API_OPENGL_ES2	rlgl.h	/^    #define GRAPHICS_API_OPENGL_ES2$/;"	d
GRAY	raylib.h	/^#define GRAY /;"	d
GREEN	raylib.h	/^#define GREEN /;"	d
GamepadAxis	raylib.h	/^} GamepadAxis;$/;"	t	typeref:enum:__anonfdf2e0de0803
GamepadButton	raylib.h	/^} GamepadButton;$/;"	t	typeref:enum:__anonfdf2e0de0703
Gesture	raylib.h	/^} Gesture;$/;"	t	typeref:enum:__anonfdf2e0de1303
GlyphInfo	raylib.h	/^typedef struct GlyphInfo {$/;"	s
GlyphInfo	raylib.h	/^} GlyphInfo;$/;"	t	typeref:struct:GlyphInfo
Image	raylib.h	/^typedef struct Image {$/;"	s
Image	raylib.h	/^} Image;$/;"	t	typeref:struct:Image
KEY_A	raylib.h	/^    KEY_A               = 65,       \/\/ Key: A | a$/;"	e	enum:__anonfdf2e0de0403
KEY_APOSTROPHE	raylib.h	/^    KEY_APOSTROPHE      = 39,       \/\/ Key: '$/;"	e	enum:__anonfdf2e0de0403
KEY_B	raylib.h	/^    KEY_B               = 66,       \/\/ Key: B | b$/;"	e	enum:__anonfdf2e0de0403
KEY_BACK	raylib.h	/^    KEY_BACK            = 4,        \/\/ Key: Android back button$/;"	e	enum:__anonfdf2e0de0403
KEY_BACKSLASH	raylib.h	/^    KEY_BACKSLASH       = 92,       \/\/ Key: '\\'$/;"	e	enum:__anonfdf2e0de0403
KEY_BACKSPACE	raylib.h	/^    KEY_BACKSPACE       = 259,      \/\/ Key: Backspace$/;"	e	enum:__anonfdf2e0de0403
KEY_C	raylib.h	/^    KEY_C               = 67,       \/\/ Key: C | c$/;"	e	enum:__anonfdf2e0de0403
KEY_CAPS_LOCK	raylib.h	/^    KEY_CAPS_LOCK       = 280,      \/\/ Key: Caps lock$/;"	e	enum:__anonfdf2e0de0403
KEY_COMMA	raylib.h	/^    KEY_COMMA           = 44,       \/\/ Key: ,$/;"	e	enum:__anonfdf2e0de0403
KEY_D	raylib.h	/^    KEY_D               = 68,       \/\/ Key: D | d$/;"	e	enum:__anonfdf2e0de0403
KEY_DELETE	raylib.h	/^    KEY_DELETE          = 261,      \/\/ Key: Del$/;"	e	enum:__anonfdf2e0de0403
KEY_DOWN	raylib.h	/^    KEY_DOWN            = 264,      \/\/ Key: Cursor down$/;"	e	enum:__anonfdf2e0de0403
KEY_E	raylib.h	/^    KEY_E               = 69,       \/\/ Key: E | e$/;"	e	enum:__anonfdf2e0de0403
KEY_EIGHT	raylib.h	/^    KEY_EIGHT           = 56,       \/\/ Key: 8$/;"	e	enum:__anonfdf2e0de0403
KEY_END	raylib.h	/^    KEY_END             = 269,      \/\/ Key: End$/;"	e	enum:__anonfdf2e0de0403
KEY_ENTER	raylib.h	/^    KEY_ENTER           = 257,      \/\/ Key: Enter$/;"	e	enum:__anonfdf2e0de0403
KEY_EQUAL	raylib.h	/^    KEY_EQUAL           = 61,       \/\/ Key: =$/;"	e	enum:__anonfdf2e0de0403
KEY_ESCAPE	raylib.h	/^    KEY_ESCAPE          = 256,      \/\/ Key: Esc$/;"	e	enum:__anonfdf2e0de0403
KEY_F	raylib.h	/^    KEY_F               = 70,       \/\/ Key: F | f$/;"	e	enum:__anonfdf2e0de0403
KEY_F1	raylib.h	/^    KEY_F1              = 290,      \/\/ Key: F1$/;"	e	enum:__anonfdf2e0de0403
KEY_F10	raylib.h	/^    KEY_F10             = 299,      \/\/ Key: F10$/;"	e	enum:__anonfdf2e0de0403
KEY_F11	raylib.h	/^    KEY_F11             = 300,      \/\/ Key: F11$/;"	e	enum:__anonfdf2e0de0403
KEY_F12	raylib.h	/^    KEY_F12             = 301,      \/\/ Key: F12$/;"	e	enum:__anonfdf2e0de0403
KEY_F2	raylib.h	/^    KEY_F2              = 291,      \/\/ Key: F2$/;"	e	enum:__anonfdf2e0de0403
KEY_F3	raylib.h	/^    KEY_F3              = 292,      \/\/ Key: F3$/;"	e	enum:__anonfdf2e0de0403
KEY_F4	raylib.h	/^    KEY_F4              = 293,      \/\/ Key: F4$/;"	e	enum:__anonfdf2e0de0403
KEY_F5	raylib.h	/^    KEY_F5              = 294,      \/\/ Key: F5$/;"	e	enum:__anonfdf2e0de0403
KEY_F6	raylib.h	/^    KEY_F6              = 295,      \/\/ Key: F6$/;"	e	enum:__anonfdf2e0de0403
KEY_F7	raylib.h	/^    KEY_F7              = 296,      \/\/ Key: F7$/;"	e	enum:__anonfdf2e0de0403
KEY_F8	raylib.h	/^    KEY_F8              = 297,      \/\/ Key: F8$/;"	e	enum:__anonfdf2e0de0403
KEY_F9	raylib.h	/^    KEY_F9              = 298,      \/\/ Key: F9$/;"	e	enum:__anonfdf2e0de0403
KEY_FIVE	raylib.h	/^    KEY_FIVE            = 53,       \/\/ Key: 5$/;"	e	enum:__anonfdf2e0de0403
KEY_FOUR	raylib.h	/^    KEY_FOUR            = 52,       \/\/ Key: 4$/;"	e	enum:__anonfdf2e0de0403
KEY_G	raylib.h	/^    KEY_G               = 71,       \/\/ Key: G | g$/;"	e	enum:__anonfdf2e0de0403
KEY_GRAVE	raylib.h	/^    KEY_GRAVE           = 96,       \/\/ Key: `$/;"	e	enum:__anonfdf2e0de0403
KEY_H	raylib.h	/^    KEY_H               = 72,       \/\/ Key: H | h$/;"	e	enum:__anonfdf2e0de0403
KEY_HOME	raylib.h	/^    KEY_HOME            = 268,      \/\/ Key: Home$/;"	e	enum:__anonfdf2e0de0403
KEY_I	raylib.h	/^    KEY_I               = 73,       \/\/ Key: I | i$/;"	e	enum:__anonfdf2e0de0403
KEY_INSERT	raylib.h	/^    KEY_INSERT          = 260,      \/\/ Key: Ins$/;"	e	enum:__anonfdf2e0de0403
KEY_J	raylib.h	/^    KEY_J               = 74,       \/\/ Key: J | j$/;"	e	enum:__anonfdf2e0de0403
KEY_K	raylib.h	/^    KEY_K               = 75,       \/\/ Key: K | k$/;"	e	enum:__anonfdf2e0de0403
KEY_KB_MENU	raylib.h	/^    KEY_KB_MENU         = 348,      \/\/ Key: KB menu$/;"	e	enum:__anonfdf2e0de0403
KEY_KP_0	raylib.h	/^    KEY_KP_0            = 320,      \/\/ Key: Keypad 0$/;"	e	enum:__anonfdf2e0de0403
KEY_KP_1	raylib.h	/^    KEY_KP_1            = 321,      \/\/ Key: Keypad 1$/;"	e	enum:__anonfdf2e0de0403
KEY_KP_2	raylib.h	/^    KEY_KP_2            = 322,      \/\/ Key: Keypad 2$/;"	e	enum:__anonfdf2e0de0403
KEY_KP_3	raylib.h	/^    KEY_KP_3            = 323,      \/\/ Key: Keypad 3$/;"	e	enum:__anonfdf2e0de0403
KEY_KP_4	raylib.h	/^    KEY_KP_4            = 324,      \/\/ Key: Keypad 4$/;"	e	enum:__anonfdf2e0de0403
KEY_KP_5	raylib.h	/^    KEY_KP_5            = 325,      \/\/ Key: Keypad 5$/;"	e	enum:__anonfdf2e0de0403
KEY_KP_6	raylib.h	/^    KEY_KP_6            = 326,      \/\/ Key: Keypad 6$/;"	e	enum:__anonfdf2e0de0403
KEY_KP_7	raylib.h	/^    KEY_KP_7            = 327,      \/\/ Key: Keypad 7$/;"	e	enum:__anonfdf2e0de0403
KEY_KP_8	raylib.h	/^    KEY_KP_8            = 328,      \/\/ Key: Keypad 8$/;"	e	enum:__anonfdf2e0de0403
KEY_KP_9	raylib.h	/^    KEY_KP_9            = 329,      \/\/ Key: Keypad 9$/;"	e	enum:__anonfdf2e0de0403
KEY_KP_ADD	raylib.h	/^    KEY_KP_ADD          = 334,      \/\/ Key: Keypad +$/;"	e	enum:__anonfdf2e0de0403
KEY_KP_DECIMAL	raylib.h	/^    KEY_KP_DECIMAL      = 330,      \/\/ Key: Keypad .$/;"	e	enum:__anonfdf2e0de0403
KEY_KP_DIVIDE	raylib.h	/^    KEY_KP_DIVIDE       = 331,      \/\/ Key: Keypad \/$/;"	e	enum:__anonfdf2e0de0403
KEY_KP_ENTER	raylib.h	/^    KEY_KP_ENTER        = 335,      \/\/ Key: Keypad Enter$/;"	e	enum:__anonfdf2e0de0403
KEY_KP_EQUAL	raylib.h	/^    KEY_KP_EQUAL        = 336,      \/\/ Key: Keypad =$/;"	e	enum:__anonfdf2e0de0403
KEY_KP_MULTIPLY	raylib.h	/^    KEY_KP_MULTIPLY     = 332,      \/\/ Key: Keypad *$/;"	e	enum:__anonfdf2e0de0403
KEY_KP_SUBTRACT	raylib.h	/^    KEY_KP_SUBTRACT     = 333,      \/\/ Key: Keypad -$/;"	e	enum:__anonfdf2e0de0403
KEY_L	raylib.h	/^    KEY_L               = 76,       \/\/ Key: L | l$/;"	e	enum:__anonfdf2e0de0403
KEY_LEFT	raylib.h	/^    KEY_LEFT            = 263,      \/\/ Key: Cursor left$/;"	e	enum:__anonfdf2e0de0403
KEY_LEFT_ALT	raylib.h	/^    KEY_LEFT_ALT        = 342,      \/\/ Key: Alt left$/;"	e	enum:__anonfdf2e0de0403
KEY_LEFT_BRACKET	raylib.h	/^    KEY_LEFT_BRACKET    = 91,       \/\/ Key: [$/;"	e	enum:__anonfdf2e0de0403
KEY_LEFT_CONTROL	raylib.h	/^    KEY_LEFT_CONTROL    = 341,      \/\/ Key: Control left$/;"	e	enum:__anonfdf2e0de0403
KEY_LEFT_SHIFT	raylib.h	/^    KEY_LEFT_SHIFT      = 340,      \/\/ Key: Shift left$/;"	e	enum:__anonfdf2e0de0403
KEY_LEFT_SUPER	raylib.h	/^    KEY_LEFT_SUPER      = 343,      \/\/ Key: Super left$/;"	e	enum:__anonfdf2e0de0403
KEY_M	raylib.h	/^    KEY_M               = 77,       \/\/ Key: M | m$/;"	e	enum:__anonfdf2e0de0403
KEY_MENU	raylib.h	/^    KEY_MENU            = 82,       \/\/ Key: Android menu button$/;"	e	enum:__anonfdf2e0de0403
KEY_MINUS	raylib.h	/^    KEY_MINUS           = 45,       \/\/ Key: -$/;"	e	enum:__anonfdf2e0de0403
KEY_N	raylib.h	/^    KEY_N               = 78,       \/\/ Key: N | n$/;"	e	enum:__anonfdf2e0de0403
KEY_NINE	raylib.h	/^    KEY_NINE            = 57,       \/\/ Key: 9$/;"	e	enum:__anonfdf2e0de0403
KEY_NULL	raylib.h	/^    KEY_NULL            = 0,        \/\/ Key: NULL, used for no key pressed$/;"	e	enum:__anonfdf2e0de0403
KEY_NUM_LOCK	raylib.h	/^    KEY_NUM_LOCK        = 282,      \/\/ Key: Num lock$/;"	e	enum:__anonfdf2e0de0403
KEY_O	raylib.h	/^    KEY_O               = 79,       \/\/ Key: O | o$/;"	e	enum:__anonfdf2e0de0403
KEY_ONE	raylib.h	/^    KEY_ONE             = 49,       \/\/ Key: 1$/;"	e	enum:__anonfdf2e0de0403
KEY_P	raylib.h	/^    KEY_P               = 80,       \/\/ Key: P | p$/;"	e	enum:__anonfdf2e0de0403
KEY_PAGE_DOWN	raylib.h	/^    KEY_PAGE_DOWN       = 267,      \/\/ Key: Page down$/;"	e	enum:__anonfdf2e0de0403
KEY_PAGE_UP	raylib.h	/^    KEY_PAGE_UP         = 266,      \/\/ Key: Page up$/;"	e	enum:__anonfdf2e0de0403
KEY_PAUSE	raylib.h	/^    KEY_PAUSE           = 284,      \/\/ Key: Pause$/;"	e	enum:__anonfdf2e0de0403
KEY_PERIOD	raylib.h	/^    KEY_PERIOD          = 46,       \/\/ Key: .$/;"	e	enum:__anonfdf2e0de0403
KEY_PRINT_SCREEN	raylib.h	/^    KEY_PRINT_SCREEN    = 283,      \/\/ Key: Print screen$/;"	e	enum:__anonfdf2e0de0403
KEY_Q	raylib.h	/^    KEY_Q               = 81,       \/\/ Key: Q | q$/;"	e	enum:__anonfdf2e0de0403
KEY_R	raylib.h	/^    KEY_R               = 82,       \/\/ Key: R | r$/;"	e	enum:__anonfdf2e0de0403
KEY_RIGHT	raylib.h	/^    KEY_RIGHT           = 262,      \/\/ Key: Cursor right$/;"	e	enum:__anonfdf2e0de0403
KEY_RIGHT_ALT	raylib.h	/^    KEY_RIGHT_ALT       = 346,      \/\/ Key: Alt right$/;"	e	enum:__anonfdf2e0de0403
KEY_RIGHT_BRACKET	raylib.h	/^    KEY_RIGHT_BRACKET   = 93,       \/\/ Key: ]$/;"	e	enum:__anonfdf2e0de0403
KEY_RIGHT_CONTROL	raylib.h	/^    KEY_RIGHT_CONTROL   = 345,      \/\/ Key: Control right$/;"	e	enum:__anonfdf2e0de0403
KEY_RIGHT_SHIFT	raylib.h	/^    KEY_RIGHT_SHIFT     = 344,      \/\/ Key: Shift right$/;"	e	enum:__anonfdf2e0de0403
KEY_RIGHT_SUPER	raylib.h	/^    KEY_RIGHT_SUPER     = 347,      \/\/ Key: Super right$/;"	e	enum:__anonfdf2e0de0403
KEY_S	raylib.h	/^    KEY_S               = 83,       \/\/ Key: S | s$/;"	e	enum:__anonfdf2e0de0403
KEY_SCROLL_LOCK	raylib.h	/^    KEY_SCROLL_LOCK     = 281,      \/\/ Key: Scroll down$/;"	e	enum:__anonfdf2e0de0403
KEY_SEMICOLON	raylib.h	/^    KEY_SEMICOLON       = 59,       \/\/ Key: ;$/;"	e	enum:__anonfdf2e0de0403
KEY_SEVEN	raylib.h	/^    KEY_SEVEN           = 55,       \/\/ Key: 7$/;"	e	enum:__anonfdf2e0de0403
KEY_SIX	raylib.h	/^    KEY_SIX             = 54,       \/\/ Key: 6$/;"	e	enum:__anonfdf2e0de0403
KEY_SLASH	raylib.h	/^    KEY_SLASH           = 47,       \/\/ Key: \/$/;"	e	enum:__anonfdf2e0de0403
KEY_SPACE	raylib.h	/^    KEY_SPACE           = 32,       \/\/ Key: Space$/;"	e	enum:__anonfdf2e0de0403
KEY_T	raylib.h	/^    KEY_T               = 84,       \/\/ Key: T | t$/;"	e	enum:__anonfdf2e0de0403
KEY_TAB	raylib.h	/^    KEY_TAB             = 258,      \/\/ Key: Tab$/;"	e	enum:__anonfdf2e0de0403
KEY_THREE	raylib.h	/^    KEY_THREE           = 51,       \/\/ Key: 3$/;"	e	enum:__anonfdf2e0de0403
KEY_TWO	raylib.h	/^    KEY_TWO             = 50,       \/\/ Key: 2$/;"	e	enum:__anonfdf2e0de0403
KEY_U	raylib.h	/^    KEY_U               = 85,       \/\/ Key: U | u$/;"	e	enum:__anonfdf2e0de0403
KEY_UP	raylib.h	/^    KEY_UP              = 265,      \/\/ Key: Cursor up$/;"	e	enum:__anonfdf2e0de0403
KEY_V	raylib.h	/^    KEY_V               = 86,       \/\/ Key: V | v$/;"	e	enum:__anonfdf2e0de0403
KEY_VOLUME_DOWN	raylib.h	/^    KEY_VOLUME_DOWN     = 25        \/\/ Key: Android volume down button$/;"	e	enum:__anonfdf2e0de0403
KEY_VOLUME_UP	raylib.h	/^    KEY_VOLUME_UP       = 24,       \/\/ Key: Android volume up button$/;"	e	enum:__anonfdf2e0de0403
KEY_W	raylib.h	/^    KEY_W               = 87,       \/\/ Key: W | w$/;"	e	enum:__anonfdf2e0de0403
KEY_X	raylib.h	/^    KEY_X               = 88,       \/\/ Key: X | x$/;"	e	enum:__anonfdf2e0de0403
KEY_Y	raylib.h	/^    KEY_Y               = 89,       \/\/ Key: Y | y$/;"	e	enum:__anonfdf2e0de0403
KEY_Z	raylib.h	/^    KEY_Z               = 90,       \/\/ Key: Z | z$/;"	e	enum:__anonfdf2e0de0403
KEY_ZERO	raylib.h	/^    KEY_ZERO            = 48,       \/\/ Key: 0$/;"	e	enum:__anonfdf2e0de0403
KeyboardKey	raylib.h	/^} KeyboardKey;$/;"	t	typeref:enum:__anonfdf2e0de0403
LIGHTGRAY	raylib.h	/^#define LIGHTGRAY /;"	d
LIME	raylib.h	/^#define LIME /;"	d
LOG_ALL	raylib.h	/^    LOG_ALL = 0,        \/\/ Display all logs$/;"	e	enum:__anonfdf2e0de0303
LOG_DEBUG	raylib.h	/^    LOG_DEBUG,          \/\/ Debug logging, used for internal debugging, it should be disabled o/;"	e	enum:__anonfdf2e0de0303
LOG_ERROR	raylib.h	/^    LOG_ERROR,          \/\/ Error logging, used on unrecoverable failures$/;"	e	enum:__anonfdf2e0de0303
LOG_FATAL	raylib.h	/^    LOG_FATAL,          \/\/ Fatal logging, used to abort program: exit(EXIT_FAILURE)$/;"	e	enum:__anonfdf2e0de0303
LOG_INFO	raylib.h	/^    LOG_INFO,           \/\/ Info logging, used for program execution info$/;"	e	enum:__anonfdf2e0de0303
LOG_NONE	raylib.h	/^    LOG_NONE            \/\/ Disable logging$/;"	e	enum:__anonfdf2e0de0303
LOG_TRACE	raylib.h	/^    LOG_TRACE,          \/\/ Trace logging, intended for internal use only$/;"	e	enum:__anonfdf2e0de0303
LOG_WARNING	raylib.h	/^    LOG_WARNING,        \/\/ Warning logging, used on recoverable failures$/;"	e	enum:__anonfdf2e0de0303
Lerp	raymath.h	/^RMAPI float Lerp(float start, float end, float amount)$/;"	f	typeref:typename:RMAPI float
LoadFileDataCallback	raylib.h	/^typedef unsigned char *(*LoadFileDataCallback)(const char *fileName, int *dataSize);    \/\/ Fil/;"	t	typeref:typename:unsigned char * (*)(const char * fileName,int * dataSize)
LoadFileTextCallback	raylib.h	/^typedef char *(*LoadFileTextCallback)(const char *fileName);            \/\/ FileIO: Load text d/;"	t	typeref:typename:char * (*)(const char * fileName)
LoopUpdate	main.cpp	/^int LoopUpdate(void){$/;"	f	typeref:typename:int
MAGENTA	raylib.h	/^#define MAGENTA /;"	d
MAROON	raylib.h	/^#define MAROON /;"	d
MATERIAL_MAP_ALBEDO	raylib.h	/^    MATERIAL_MAP_ALBEDO = 0,        \/\/ Albedo material (same as: MATERIAL_MAP_DIFFUSE)$/;"	e	enum:__anonfdf2e0de0903
MATERIAL_MAP_BRDF	raylib.h	/^    MATERIAL_MAP_BRDF               \/\/ Brdf material$/;"	e	enum:__anonfdf2e0de0903
MATERIAL_MAP_CUBEMAP	raylib.h	/^    MATERIAL_MAP_CUBEMAP,           \/\/ Cubemap material (NOTE: Uses GL_TEXTURE_CUBE_MAP)$/;"	e	enum:__anonfdf2e0de0903
MATERIAL_MAP_DIFFUSE	raylib.h	/^#define MATERIAL_MAP_DIFFUSE /;"	d
MATERIAL_MAP_EMISSION	raylib.h	/^    MATERIAL_MAP_EMISSION,          \/\/ Emission material$/;"	e	enum:__anonfdf2e0de0903
MATERIAL_MAP_HEIGHT	raylib.h	/^    MATERIAL_MAP_HEIGHT,            \/\/ Heightmap material$/;"	e	enum:__anonfdf2e0de0903
MATERIAL_MAP_IRRADIANCE	raylib.h	/^    MATERIAL_MAP_IRRADIANCE,        \/\/ Irradiance material (NOTE: Uses GL_TEXTURE_CUBE_MAP)$/;"	e	enum:__anonfdf2e0de0903
MATERIAL_MAP_METALNESS	raylib.h	/^    MATERIAL_MAP_METALNESS,         \/\/ Metalness material (same as: MATERIAL_MAP_SPECULAR)$/;"	e	enum:__anonfdf2e0de0903
MATERIAL_MAP_NORMAL	raylib.h	/^    MATERIAL_MAP_NORMAL,            \/\/ Normal material$/;"	e	enum:__anonfdf2e0de0903
MATERIAL_MAP_OCCLUSION	raylib.h	/^    MATERIAL_MAP_OCCLUSION,         \/\/ Ambient occlusion material$/;"	e	enum:__anonfdf2e0de0903
MATERIAL_MAP_PREFILTER	raylib.h	/^    MATERIAL_MAP_PREFILTER,         \/\/ Prefilter material (NOTE: Uses GL_TEXTURE_CUBE_MAP)$/;"	e	enum:__anonfdf2e0de0903
MATERIAL_MAP_ROUGHNESS	raylib.h	/^    MATERIAL_MAP_ROUGHNESS,         \/\/ Roughness material$/;"	e	enum:__anonfdf2e0de0903
MATERIAL_MAP_SPECULAR	raylib.h	/^#define MATERIAL_MAP_SPECULAR /;"	d
MAX	rlgl.h	/^        #define MAX(/;"	d
MIN	rlgl.h	/^        #define MIN(/;"	d
MOUSE_BUTTON_BACK	raylib.h	/^    MOUSE_BUTTON_BACK    = 6,       \/\/ Mouse button back (advanced mouse device)$/;"	e	enum:__anonfdf2e0de0503
MOUSE_BUTTON_EXTRA	raylib.h	/^    MOUSE_BUTTON_EXTRA   = 4,       \/\/ Mouse button extra (advanced mouse device)$/;"	e	enum:__anonfdf2e0de0503
MOUSE_BUTTON_FORWARD	raylib.h	/^    MOUSE_BUTTON_FORWARD = 5,       \/\/ Mouse button forward (advanced mouse device)$/;"	e	enum:__anonfdf2e0de0503
MOUSE_BUTTON_LEFT	raylib.h	/^    MOUSE_BUTTON_LEFT    = 0,       \/\/ Mouse button left$/;"	e	enum:__anonfdf2e0de0503
MOUSE_BUTTON_MIDDLE	raylib.h	/^    MOUSE_BUTTON_MIDDLE  = 2,       \/\/ Mouse button middle (pressed wheel)$/;"	e	enum:__anonfdf2e0de0503
MOUSE_BUTTON_RIGHT	raylib.h	/^    MOUSE_BUTTON_RIGHT   = 1,       \/\/ Mouse button right$/;"	e	enum:__anonfdf2e0de0503
MOUSE_BUTTON_SIDE	raylib.h	/^    MOUSE_BUTTON_SIDE    = 3,       \/\/ Mouse button side (advanced mouse device)$/;"	e	enum:__anonfdf2e0de0503
MOUSE_CURSOR_ARROW	raylib.h	/^    MOUSE_CURSOR_ARROW         = 1,     \/\/ Arrow shape$/;"	e	enum:__anonfdf2e0de0603
MOUSE_CURSOR_CROSSHAIR	raylib.h	/^    MOUSE_CURSOR_CROSSHAIR     = 3,     \/\/ Cross shape$/;"	e	enum:__anonfdf2e0de0603
MOUSE_CURSOR_DEFAULT	raylib.h	/^    MOUSE_CURSOR_DEFAULT       = 0,     \/\/ Default pointer shape$/;"	e	enum:__anonfdf2e0de0603
MOUSE_CURSOR_IBEAM	raylib.h	/^    MOUSE_CURSOR_IBEAM         = 2,     \/\/ Text writing cursor shape$/;"	e	enum:__anonfdf2e0de0603
MOUSE_CURSOR_NOT_ALLOWED	raylib.h	/^    MOUSE_CURSOR_NOT_ALLOWED   = 10     \/\/ The operation-not-allowed shape$/;"	e	enum:__anonfdf2e0de0603
MOUSE_CURSOR_POINTING_HAND	raylib.h	/^    MOUSE_CURSOR_POINTING_HAND = 4,     \/\/ Pointing hand cursor$/;"	e	enum:__anonfdf2e0de0603
MOUSE_CURSOR_RESIZE_ALL	raylib.h	/^    MOUSE_CURSOR_RESIZE_ALL    = 9,     \/\/ The omnidirectional resize\/move cursor shape$/;"	e	enum:__anonfdf2e0de0603
MOUSE_CURSOR_RESIZE_EW	raylib.h	/^    MOUSE_CURSOR_RESIZE_EW     = 5,     \/\/ Horizontal resize\/move arrow shape$/;"	e	enum:__anonfdf2e0de0603
MOUSE_CURSOR_RESIZE_NESW	raylib.h	/^    MOUSE_CURSOR_RESIZE_NESW   = 8,     \/\/ The top-right to bottom-left diagonal resize\/move /;"	e	enum:__anonfdf2e0de0603
MOUSE_CURSOR_RESIZE_NS	raylib.h	/^    MOUSE_CURSOR_RESIZE_NS     = 6,     \/\/ Vertical resize\/move arrow shape$/;"	e	enum:__anonfdf2e0de0603
MOUSE_CURSOR_RESIZE_NWSE	raylib.h	/^    MOUSE_CURSOR_RESIZE_NWSE   = 7,     \/\/ Top-left to bottom-right diagonal resize\/move arro/;"	e	enum:__anonfdf2e0de0603
MOUSE_LEFT_BUTTON	raylib.h	/^#define MOUSE_LEFT_BUTTON /;"	d
MOUSE_MIDDLE_BUTTON	raylib.h	/^#define MOUSE_MIDDLE_BUTTON /;"	d
MOUSE_RIGHT_BUTTON	raylib.h	/^#define MOUSE_RIGHT_BUTTON /;"	d
Material	raylib.h	/^typedef struct Material {$/;"	s
Material	raylib.h	/^} Material;$/;"	t	typeref:struct:Material
MaterialMap	raylib.h	/^typedef struct MaterialMap {$/;"	s
MaterialMap	raylib.h	/^} MaterialMap;$/;"	t	typeref:struct:MaterialMap
MaterialMapIndex	raylib.h	/^} MaterialMapIndex;$/;"	t	typeref:enum:__anonfdf2e0de0903
Matrix	raylib.h	/^typedef struct Matrix {$/;"	s
Matrix	raylib.h	/^} Matrix;$/;"	t	typeref:struct:Matrix
Matrix	raymath.h	/^typedef struct Matrix {$/;"	s
Matrix	raymath.h	/^} Matrix;$/;"	t	typeref:struct:Matrix
Matrix	rlgl.h	/^typedef struct Matrix {$/;"	s
Matrix	rlgl.h	/^} Matrix;$/;"	t	typeref:struct:Matrix
MatrixAdd	raymath.h	/^RMAPI Matrix MatrixAdd(Matrix left, Matrix right)$/;"	f	typeref:typename:RMAPI Matrix
MatrixDeterminant	raymath.h	/^RMAPI float MatrixDeterminant(Matrix mat)$/;"	f	typeref:typename:RMAPI float
MatrixFrustum	raymath.h	/^RMAPI Matrix MatrixFrustum(double left, double right, double bottom, double top, double near, do/;"	f	typeref:typename:RMAPI Matrix
MatrixIdentity	raymath.h	/^RMAPI Matrix MatrixIdentity(void)$/;"	f	typeref:typename:RMAPI Matrix
MatrixInvert	raymath.h	/^RMAPI Matrix MatrixInvert(Matrix mat)$/;"	f	typeref:typename:RMAPI Matrix
MatrixLookAt	raymath.h	/^RMAPI Matrix MatrixLookAt(Vector3 eye, Vector3 target, Vector3 up)$/;"	f	typeref:typename:RMAPI Matrix
MatrixMultiply	raymath.h	/^RMAPI Matrix MatrixMultiply(Matrix left, Matrix right)$/;"	f	typeref:typename:RMAPI Matrix
MatrixOrtho	raymath.h	/^RMAPI Matrix MatrixOrtho(double left, double right, double bottom, double top, double nearPlane,/;"	f	typeref:typename:RMAPI Matrix
MatrixPerspective	raymath.h	/^RMAPI Matrix MatrixPerspective(double fovY, double aspect, double nearPlane, double farPlane)$/;"	f	typeref:typename:RMAPI Matrix
MatrixRotate	raymath.h	/^RMAPI Matrix MatrixRotate(Vector3 axis, float angle)$/;"	f	typeref:typename:RMAPI Matrix
MatrixRotateX	raymath.h	/^RMAPI Matrix MatrixRotateX(float angle)$/;"	f	typeref:typename:RMAPI Matrix
MatrixRotateXYZ	raymath.h	/^RMAPI Matrix MatrixRotateXYZ(Vector3 angle)$/;"	f	typeref:typename:RMAPI Matrix
MatrixRotateY	raymath.h	/^RMAPI Matrix MatrixRotateY(float angle)$/;"	f	typeref:typename:RMAPI Matrix
MatrixRotateZ	raymath.h	/^RMAPI Matrix MatrixRotateZ(float angle)$/;"	f	typeref:typename:RMAPI Matrix
MatrixRotateZYX	raymath.h	/^RMAPI Matrix MatrixRotateZYX(Vector3 angle)$/;"	f	typeref:typename:RMAPI Matrix
MatrixScale	raymath.h	/^RMAPI Matrix MatrixScale(float x, float y, float z)$/;"	f	typeref:typename:RMAPI Matrix
MatrixSubtract	raymath.h	/^RMAPI Matrix MatrixSubtract(Matrix left, Matrix right)$/;"	f	typeref:typename:RMAPI Matrix
MatrixToFloat	raymath.h	/^    #define MatrixToFloat(/;"	d
MatrixToFloatV	raymath.h	/^RMAPI float16 MatrixToFloatV(Matrix mat)$/;"	f	typeref:typename:RMAPI float16
MatrixTrace	raymath.h	/^RMAPI float MatrixTrace(Matrix mat)$/;"	f	typeref:typename:RMAPI float
MatrixTranslate	raymath.h	/^RMAPI Matrix MatrixTranslate(float x, float y, float z)$/;"	f	typeref:typename:RMAPI Matrix
MatrixTranspose	raymath.h	/^RMAPI Matrix MatrixTranspose(Matrix mat)$/;"	f	typeref:typename:RMAPI Matrix
Mesh	raylib.h	/^typedef struct Mesh {$/;"	s
Mesh	raylib.h	/^} Mesh;$/;"	t	typeref:struct:Mesh
Model	raylib.h	/^typedef struct Model {$/;"	s
Model	raylib.h	/^} Model;$/;"	t	typeref:struct:Model
ModelAnimation	raylib.h	/^typedef struct ModelAnimation {$/;"	s
ModelAnimation	raylib.h	/^} ModelAnimation;$/;"	t	typeref:struct:ModelAnimation
MouseButton	raylib.h	/^} MouseButton;$/;"	t	typeref:enum:__anonfdf2e0de0503
MouseCursor	raylib.h	/^} MouseCursor;$/;"	t	typeref:enum:__anonfdf2e0de0603
Music	raylib.h	/^typedef struct Music {$/;"	s
Music	raylib.h	/^} Music;$/;"	t	typeref:struct:Music
NPATCH_NINE_PATCH	raylib.h	/^    NPATCH_NINE_PATCH = 0,          \/\/ Npatch layout: 3x3 tiles$/;"	e	enum:__anonfdf2e0de1603
NPATCH_THREE_PATCH_HORIZONTAL	raylib.h	/^    NPATCH_THREE_PATCH_HORIZONTAL   \/\/ Npatch layout: 3x1 tiles$/;"	e	enum:__anonfdf2e0de1603
NPATCH_THREE_PATCH_VERTICAL	raylib.h	/^    NPATCH_THREE_PATCH_VERTICAL,    \/\/ Npatch layout: 1x3 tiles$/;"	e	enum:__anonfdf2e0de1603
NPatchInfo	raylib.h	/^typedef struct NPatchInfo {$/;"	s
NPatchInfo	raylib.h	/^} NPatchInfo;$/;"	t	typeref:struct:NPatchInfo
NPatchLayout	raylib.h	/^} NPatchLayout;$/;"	t	typeref:enum:__anonfdf2e0de1603
Normalize	raymath.h	/^RMAPI float Normalize(float value, float start, float end)$/;"	f	typeref:typename:RMAPI float
ORANGE	raylib.h	/^#define ORANGE /;"	d
PFNGLDRAWARRAYSINSTANCEDEXTPROC	rlgl.h	/^    typedef void (GL_APIENTRYP PFNGLDRAWARRAYSINSTANCEDEXTPROC) (GLenum mode, GLint start, GLsiz/;"	t	typeref:typename:void (GL_APIENTRYP)(GLenum mode,GLint start,GLsizei count,GLsizei primcount)
PFNGLDRAWELEMENTSINSTANCEDEXTPROC	rlgl.h	/^    typedef void (GL_APIENTRYP PFNGLDRAWELEMENTSINSTANCEDEXTPROC) (GLenum mode, GLsizei count, G/;"	t	typeref:typename:void (GL_APIENTRYP)(GLenum mode,GLsizei count,GLenum type,const void * indices,GLsizei primcount)
PFNGLVERTEXATTRIBDIVISOREXTPROC	rlgl.h	/^    typedef void (GL_APIENTRYP PFNGLVERTEXATTRIBDIVISOREXTPROC) (GLuint index, GLuint divisor);$/;"	t	typeref:typename:void (GL_APIENTRYP)(GLuint index,GLuint divisor)
PI	raylib.h	/^    #define PI /;"	d
PI	raymath.h	/^    #define PI /;"	d
PI	rlgl.h	/^    #define PI /;"	d
PINK	raylib.h	/^#define PINK /;"	d
PIXELFORMAT_COMPRESSED_ASTC_4x4_RGBA	raylib.h	/^    PIXELFORMAT_COMPRESSED_ASTC_4x4_RGBA,   \/\/ 8 bpp$/;"	e	enum:__anonfdf2e0de0d03
PIXELFORMAT_COMPRESSED_ASTC_8x8_RGBA	raylib.h	/^    PIXELFORMAT_COMPRESSED_ASTC_8x8_RGBA    \/\/ 2 bpp$/;"	e	enum:__anonfdf2e0de0d03
PIXELFORMAT_COMPRESSED_DXT1_RGB	raylib.h	/^    PIXELFORMAT_COMPRESSED_DXT1_RGB,        \/\/ 4 bpp (no alpha)$/;"	e	enum:__anonfdf2e0de0d03
PIXELFORMAT_COMPRESSED_DXT1_RGBA	raylib.h	/^    PIXELFORMAT_COMPRESSED_DXT1_RGBA,       \/\/ 4 bpp (1 bit alpha)$/;"	e	enum:__anonfdf2e0de0d03
PIXELFORMAT_COMPRESSED_DXT3_RGBA	raylib.h	/^    PIXELFORMAT_COMPRESSED_DXT3_RGBA,       \/\/ 8 bpp$/;"	e	enum:__anonfdf2e0de0d03
PIXELFORMAT_COMPRESSED_DXT5_RGBA	raylib.h	/^    PIXELFORMAT_COMPRESSED_DXT5_RGBA,       \/\/ 8 bpp$/;"	e	enum:__anonfdf2e0de0d03
PIXELFORMAT_COMPRESSED_ETC1_RGB	raylib.h	/^    PIXELFORMAT_COMPRESSED_ETC1_RGB,        \/\/ 4 bpp$/;"	e	enum:__anonfdf2e0de0d03
PIXELFORMAT_COMPRESSED_ETC2_EAC_RGBA	raylib.h	/^    PIXELFORMAT_COMPRESSED_ETC2_EAC_RGBA,   \/\/ 8 bpp$/;"	e	enum:__anonfdf2e0de0d03
PIXELFORMAT_COMPRESSED_ETC2_RGB	raylib.h	/^    PIXELFORMAT_COMPRESSED_ETC2_RGB,        \/\/ 4 bpp$/;"	e	enum:__anonfdf2e0de0d03
PIXELFORMAT_COMPRESSED_PVRT_RGB	raylib.h	/^    PIXELFORMAT_COMPRESSED_PVRT_RGB,        \/\/ 4 bpp$/;"	e	enum:__anonfdf2e0de0d03
PIXELFORMAT_COMPRESSED_PVRT_RGBA	raylib.h	/^    PIXELFORMAT_COMPRESSED_PVRT_RGBA,       \/\/ 4 bpp$/;"	e	enum:__anonfdf2e0de0d03
PIXELFORMAT_UNCOMPRESSED_GRAYSCALE	raylib.h	/^    PIXELFORMAT_UNCOMPRESSED_GRAYSCALE = 1, \/\/ 8 bit per pixel (no alpha)$/;"	e	enum:__anonfdf2e0de0d03
PIXELFORMAT_UNCOMPRESSED_GRAY_ALPHA	raylib.h	/^    PIXELFORMAT_UNCOMPRESSED_GRAY_ALPHA,    \/\/ 8*2 bpp (2 channels)$/;"	e	enum:__anonfdf2e0de0d03
PIXELFORMAT_UNCOMPRESSED_R16	raylib.h	/^    PIXELFORMAT_UNCOMPRESSED_R16,           \/\/ 16 bpp (1 channel - half float)$/;"	e	enum:__anonfdf2e0de0d03
PIXELFORMAT_UNCOMPRESSED_R16G16B16	raylib.h	/^    PIXELFORMAT_UNCOMPRESSED_R16G16B16,     \/\/ 16*3 bpp (3 channels - half float)$/;"	e	enum:__anonfdf2e0de0d03
PIXELFORMAT_UNCOMPRESSED_R16G16B16A16	raylib.h	/^    PIXELFORMAT_UNCOMPRESSED_R16G16B16A16,  \/\/ 16*4 bpp (4 channels - half float)$/;"	e	enum:__anonfdf2e0de0d03
PIXELFORMAT_UNCOMPRESSED_R32	raylib.h	/^    PIXELFORMAT_UNCOMPRESSED_R32,           \/\/ 32 bpp (1 channel - float)$/;"	e	enum:__anonfdf2e0de0d03
PIXELFORMAT_UNCOMPRESSED_R32G32B32	raylib.h	/^    PIXELFORMAT_UNCOMPRESSED_R32G32B32,     \/\/ 32*3 bpp (3 channels - float)$/;"	e	enum:__anonfdf2e0de0d03
PIXELFORMAT_UNCOMPRESSED_R32G32B32A32	raylib.h	/^    PIXELFORMAT_UNCOMPRESSED_R32G32B32A32,  \/\/ 32*4 bpp (4 channels - float)$/;"	e	enum:__anonfdf2e0de0d03
PIXELFORMAT_UNCOMPRESSED_R4G4B4A4	raylib.h	/^    PIXELFORMAT_UNCOMPRESSED_R4G4B4A4,      \/\/ 16 bpp (4 bit alpha)$/;"	e	enum:__anonfdf2e0de0d03
PIXELFORMAT_UNCOMPRESSED_R5G5B5A1	raylib.h	/^    PIXELFORMAT_UNCOMPRESSED_R5G5B5A1,      \/\/ 16 bpp (1 bit alpha)$/;"	e	enum:__anonfdf2e0de0d03
PIXELFORMAT_UNCOMPRESSED_R5G6B5	raylib.h	/^    PIXELFORMAT_UNCOMPRESSED_R5G6B5,        \/\/ 16 bpp$/;"	e	enum:__anonfdf2e0de0d03
PIXELFORMAT_UNCOMPRESSED_R8G8B8	raylib.h	/^    PIXELFORMAT_UNCOMPRESSED_R8G8B8,        \/\/ 24 bpp$/;"	e	enum:__anonfdf2e0de0d03
PIXELFORMAT_UNCOMPRESSED_R8G8B8A8	raylib.h	/^    PIXELFORMAT_UNCOMPRESSED_R8G8B8A8,      \/\/ 32 bpp$/;"	e	enum:__anonfdf2e0de0d03
PURPLE	raylib.h	/^#define PURPLE /;"	d
PixelFormat	raylib.h	/^} PixelFormat;$/;"	t	typeref:enum:__anonfdf2e0de0d03
Quaternion	raylib.h	/^typedef Vector4 Quaternion;$/;"	t	typeref:typename:Vector4
Quaternion	raymath.h	/^typedef Vector4 Quaternion;$/;"	t	typeref:typename:Vector4
QuaternionAdd	raymath.h	/^RMAPI Quaternion QuaternionAdd(Quaternion q1, Quaternion q2)$/;"	f	typeref:typename:RMAPI Quaternion
QuaternionAddValue	raymath.h	/^RMAPI Quaternion QuaternionAddValue(Quaternion q, float add)$/;"	f	typeref:typename:RMAPI Quaternion
QuaternionDivide	raymath.h	/^RMAPI Quaternion QuaternionDivide(Quaternion q1, Quaternion q2)$/;"	f	typeref:typename:RMAPI Quaternion
QuaternionEquals	raymath.h	/^RMAPI int QuaternionEquals(Quaternion p, Quaternion q)$/;"	f	typeref:typename:RMAPI int
QuaternionFromAxisAngle	raymath.h	/^RMAPI Quaternion QuaternionFromAxisAngle(Vector3 axis, float angle)$/;"	f	typeref:typename:RMAPI Quaternion
QuaternionFromEuler	raymath.h	/^RMAPI Quaternion QuaternionFromEuler(float pitch, float yaw, float roll)$/;"	f	typeref:typename:RMAPI Quaternion
QuaternionFromMatrix	raymath.h	/^RMAPI Quaternion QuaternionFromMatrix(Matrix mat)$/;"	f	typeref:typename:RMAPI Quaternion
QuaternionFromVector3ToVector3	raymath.h	/^RMAPI Quaternion QuaternionFromVector3ToVector3(Vector3 from, Vector3 to)$/;"	f	typeref:typename:RMAPI Quaternion
QuaternionIdentity	raymath.h	/^RMAPI Quaternion QuaternionIdentity(void)$/;"	f	typeref:typename:RMAPI Quaternion
QuaternionInvert	raymath.h	/^RMAPI Quaternion QuaternionInvert(Quaternion q)$/;"	f	typeref:typename:RMAPI Quaternion
QuaternionLength	raymath.h	/^RMAPI float QuaternionLength(Quaternion q)$/;"	f	typeref:typename:RMAPI float
QuaternionLerp	raymath.h	/^RMAPI Quaternion QuaternionLerp(Quaternion q1, Quaternion q2, float amount)$/;"	f	typeref:typename:RMAPI Quaternion
QuaternionMultiply	raymath.h	/^RMAPI Quaternion QuaternionMultiply(Quaternion q1, Quaternion q2)$/;"	f	typeref:typename:RMAPI Quaternion
QuaternionNlerp	raymath.h	/^RMAPI Quaternion QuaternionNlerp(Quaternion q1, Quaternion q2, float amount)$/;"	f	typeref:typename:RMAPI Quaternion
QuaternionNormalize	raymath.h	/^RMAPI Quaternion QuaternionNormalize(Quaternion q)$/;"	f	typeref:typename:RMAPI Quaternion
QuaternionScale	raymath.h	/^RMAPI Quaternion QuaternionScale(Quaternion q, float mul)$/;"	f	typeref:typename:RMAPI Quaternion
QuaternionSlerp	raymath.h	/^RMAPI Quaternion QuaternionSlerp(Quaternion q1, Quaternion q2, float amount)$/;"	f	typeref:typename:RMAPI Quaternion
QuaternionSubtract	raymath.h	/^RMAPI Quaternion QuaternionSubtract(Quaternion q1, Quaternion q2)$/;"	f	typeref:typename:RMAPI Quaternion
QuaternionSubtractValue	raymath.h	/^RMAPI Quaternion QuaternionSubtractValue(Quaternion q, float sub)$/;"	f	typeref:typename:RMAPI Quaternion
QuaternionToAxisAngle	raymath.h	/^RMAPI void QuaternionToAxisAngle(Quaternion q, Vector3 *outAxis, float *outAngle)$/;"	f	typeref:typename:RMAPI void
QuaternionToEuler	raymath.h	/^RMAPI Vector3 QuaternionToEuler(Quaternion q)$/;"	f	typeref:typename:RMAPI Vector3
QuaternionToMatrix	raymath.h	/^RMAPI Matrix QuaternionToMatrix(Quaternion q)$/;"	f	typeref:typename:RMAPI Matrix
QuaternionTransform	raymath.h	/^RMAPI Quaternion QuaternionTransform(Quaternion q, Matrix mat)$/;"	f	typeref:typename:RMAPI Quaternion
RAD2DEG	raylib.h	/^    #define RAD2DEG /;"	d
RAD2DEG	raymath.h	/^    #define RAD2DEG /;"	d
RAD2DEG	rlgl.h	/^    #define RAD2DEG /;"	d
RAYLIB_H	raylib.h	/^#define RAYLIB_H$/;"	d
RAYLIB_VERSION	raylib.h	/^#define RAYLIB_VERSION /;"	d
RAYLIB_VERSION_MAJOR	raylib.h	/^#define RAYLIB_VERSION_MAJOR /;"	d
RAYLIB_VERSION_MINOR	raylib.h	/^#define RAYLIB_VERSION_MINOR /;"	d
RAYLIB_VERSION_PATCH	raylib.h	/^#define RAYLIB_VERSION_PATCH /;"	d
RAYMATH_H	raymath.h	/^#define RAYMATH_H$/;"	d
RAYWHITE	raylib.h	/^#define RAYWHITE /;"	d
RED	raylib.h	/^#define RED /;"	d
RLAPI	raylib.h	/^        #define RLAPI /;"	d
RLAPI	raylib.h	/^    #define RLAPI /;"	d
RLAPI	rlgl.h	/^        #define RLAPI /;"	d
RLAPI	rlgl.h	/^    #define RLAPI /;"	d
RLGL	rlgl.h	/^static rlglData RLGL = { 0 };$/;"	v	typeref:typename:rlglData
RLGL_H	rlgl.h	/^#define RLGL_H$/;"	d
RLGL_RENDER_TEXTURES_HINT	rlgl.h	/^#define RLGL_RENDER_TEXTURES_HINT$/;"	d
RLGL_VERSION	rlgl.h	/^#define RLGL_VERSION /;"	d
RL_ATTACHMENT_COLOR_CHANNEL0	rlgl.h	/^    RL_ATTACHMENT_COLOR_CHANNEL0 = 0,       \/\/ Framebuffer attachment type: color 0$/;"	e	enum:__anon19a7bfac0a03
RL_ATTACHMENT_COLOR_CHANNEL1	rlgl.h	/^    RL_ATTACHMENT_COLOR_CHANNEL1 = 1,       \/\/ Framebuffer attachment type: color 1$/;"	e	enum:__anon19a7bfac0a03
RL_ATTACHMENT_COLOR_CHANNEL2	rlgl.h	/^    RL_ATTACHMENT_COLOR_CHANNEL2 = 2,       \/\/ Framebuffer attachment type: color 2$/;"	e	enum:__anon19a7bfac0a03
RL_ATTACHMENT_COLOR_CHANNEL3	rlgl.h	/^    RL_ATTACHMENT_COLOR_CHANNEL3 = 3,       \/\/ Framebuffer attachment type: color 3$/;"	e	enum:__anon19a7bfac0a03
RL_ATTACHMENT_COLOR_CHANNEL4	rlgl.h	/^    RL_ATTACHMENT_COLOR_CHANNEL4 = 4,       \/\/ Framebuffer attachment type: color 4$/;"	e	enum:__anon19a7bfac0a03
RL_ATTACHMENT_COLOR_CHANNEL5	rlgl.h	/^    RL_ATTACHMENT_COLOR_CHANNEL5 = 5,       \/\/ Framebuffer attachment type: color 5$/;"	e	enum:__anon19a7bfac0a03
RL_ATTACHMENT_COLOR_CHANNEL6	rlgl.h	/^    RL_ATTACHMENT_COLOR_CHANNEL6 = 6,       \/\/ Framebuffer attachment type: color 6$/;"	e	enum:__anon19a7bfac0a03
RL_ATTACHMENT_COLOR_CHANNEL7	rlgl.h	/^    RL_ATTACHMENT_COLOR_CHANNEL7 = 7,       \/\/ Framebuffer attachment type: color 7$/;"	e	enum:__anon19a7bfac0a03
RL_ATTACHMENT_CUBEMAP_NEGATIVE_X	rlgl.h	/^    RL_ATTACHMENT_CUBEMAP_NEGATIVE_X = 1,   \/\/ Framebuffer texture attachment type: cubemap, -/;"	e	enum:__anon19a7bfac0b03
RL_ATTACHMENT_CUBEMAP_NEGATIVE_Y	rlgl.h	/^    RL_ATTACHMENT_CUBEMAP_NEGATIVE_Y = 3,   \/\/ Framebuffer texture attachment type: cubemap, -/;"	e	enum:__anon19a7bfac0b03
RL_ATTACHMENT_CUBEMAP_NEGATIVE_Z	rlgl.h	/^    RL_ATTACHMENT_CUBEMAP_NEGATIVE_Z = 5,   \/\/ Framebuffer texture attachment type: cubemap, -/;"	e	enum:__anon19a7bfac0b03
RL_ATTACHMENT_CUBEMAP_POSITIVE_X	rlgl.h	/^    RL_ATTACHMENT_CUBEMAP_POSITIVE_X = 0,   \/\/ Framebuffer texture attachment type: cubemap, +/;"	e	enum:__anon19a7bfac0b03
RL_ATTACHMENT_CUBEMAP_POSITIVE_Y	rlgl.h	/^    RL_ATTACHMENT_CUBEMAP_POSITIVE_Y = 2,   \/\/ Framebuffer texture attachment type: cubemap, +/;"	e	enum:__anon19a7bfac0b03
RL_ATTACHMENT_CUBEMAP_POSITIVE_Z	rlgl.h	/^    RL_ATTACHMENT_CUBEMAP_POSITIVE_Z = 4,   \/\/ Framebuffer texture attachment type: cubemap, +/;"	e	enum:__anon19a7bfac0b03
RL_ATTACHMENT_DEPTH	rlgl.h	/^    RL_ATTACHMENT_DEPTH = 100,              \/\/ Framebuffer attachment type: depth$/;"	e	enum:__anon19a7bfac0a03
RL_ATTACHMENT_RENDERBUFFER	rlgl.h	/^    RL_ATTACHMENT_RENDERBUFFER = 200,       \/\/ Framebuffer texture attachment type: renderbuff/;"	e	enum:__anon19a7bfac0b03
RL_ATTACHMENT_STENCIL	rlgl.h	/^    RL_ATTACHMENT_STENCIL = 200,            \/\/ Framebuffer attachment type: stencil$/;"	e	enum:__anon19a7bfac0a03
RL_ATTACHMENT_TEXTURE2D	rlgl.h	/^    RL_ATTACHMENT_TEXTURE2D = 100,          \/\/ Framebuffer texture attachment type: texture2d$/;"	e	enum:__anon19a7bfac0b03
RL_BLEND_ADDITIVE	rlgl.h	/^    RL_BLEND_ADDITIVE,                  \/\/ Blend textures adding colors$/;"	e	enum:__anon19a7bfac0603
RL_BLEND_ADD_COLORS	rlgl.h	/^    RL_BLEND_ADD_COLORS,                \/\/ Blend textures adding colors (alternative)$/;"	e	enum:__anon19a7bfac0603
RL_BLEND_ALPHA	rlgl.h	/^    RL_BLEND_ALPHA = 0,                 \/\/ Blend textures considering alpha (default)$/;"	e	enum:__anon19a7bfac0603
RL_BLEND_ALPHA_PREMULTIPLY	rlgl.h	/^    RL_BLEND_ALPHA_PREMULTIPLY,         \/\/ Blend premultiplied textures considering alpha$/;"	e	enum:__anon19a7bfac0603
RL_BLEND_COLOR	rlgl.h	/^#define RL_BLEND_COLOR /;"	d
RL_BLEND_CUSTOM	rlgl.h	/^    RL_BLEND_CUSTOM,                    \/\/ Blend textures using custom src\/dst factors (use r/;"	e	enum:__anon19a7bfac0603
RL_BLEND_CUSTOM_SEPARATE	rlgl.h	/^    RL_BLEND_CUSTOM_SEPARATE            \/\/ Blend textures using custom src\/dst factors (use r/;"	e	enum:__anon19a7bfac0603
RL_BLEND_DST_ALPHA	rlgl.h	/^#define RL_BLEND_DST_ALPHA /;"	d
RL_BLEND_DST_RGB	rlgl.h	/^#define RL_BLEND_DST_RGB /;"	d
RL_BLEND_EQUATION	rlgl.h	/^#define RL_BLEND_EQUATION /;"	d
RL_BLEND_EQUATION_ALPHA	rlgl.h	/^#define RL_BLEND_EQUATION_ALPHA /;"	d
RL_BLEND_EQUATION_RGB	rlgl.h	/^#define RL_BLEND_EQUATION_RGB /;"	d
RL_BLEND_MULTIPLIED	rlgl.h	/^    RL_BLEND_MULTIPLIED,                \/\/ Blend textures multiplying colors$/;"	e	enum:__anon19a7bfac0603
RL_BLEND_SRC_ALPHA	rlgl.h	/^#define RL_BLEND_SRC_ALPHA /;"	d
RL_BLEND_SRC_RGB	rlgl.h	/^#define RL_BLEND_SRC_RGB /;"	d
RL_BLEND_SUBTRACT_COLORS	rlgl.h	/^    RL_BLEND_SUBTRACT_COLORS,           \/\/ Blend textures subtracting colors (alternative)$/;"	e	enum:__anon19a7bfac0603
RL_BOOL_TYPE	raylib.h	/^    #define RL_BOOL_TYPE$/;"	d
RL_CALLOC	raylib.h	/^    #define RL_CALLOC(/;"	d
RL_CALLOC	rlgl.h	/^    #define RL_CALLOC(/;"	d
RL_COLOR_TYPE	raylib.h	/^#define RL_COLOR_TYPE$/;"	d
RL_COMPUTE_SHADER	rlgl.h	/^#define RL_COMPUTE_SHADER /;"	d
RL_CONSTANT_ALPHA	rlgl.h	/^#define RL_CONSTANT_ALPHA /;"	d
RL_CONSTANT_COLOR	rlgl.h	/^#define RL_CONSTANT_COLOR /;"	d
RL_CULL_DISTANCE_FAR	rlgl.h	/^    #define RL_CULL_DISTANCE_FAR /;"	d
RL_CULL_DISTANCE_NEAR	rlgl.h	/^    #define RL_CULL_DISTANCE_NEAR /;"	d
RL_CULL_FACE_BACK	rlgl.h	/^    RL_CULL_FACE_BACK$/;"	e	enum:__anon19a7bfac0c03
RL_CULL_FACE_FRONT	rlgl.h	/^    RL_CULL_FACE_FRONT = 0,$/;"	e	enum:__anon19a7bfac0c03
RL_DEFAULT_BATCH_BUFFERS	rlgl.h	/^    #define RL_DEFAULT_BATCH_BUFFERS /;"	d
RL_DEFAULT_BATCH_BUFFER_ELEMENTS	rlgl.h	/^        #define RL_DEFAULT_BATCH_BUFFER_ELEMENTS /;"	d
RL_DEFAULT_BATCH_DRAWCALLS	rlgl.h	/^    #define RL_DEFAULT_BATCH_DRAWCALLS /;"	d
RL_DEFAULT_BATCH_MAX_TEXTURE_UNITS	rlgl.h	/^    #define RL_DEFAULT_BATCH_MAX_TEXTURE_UNITS /;"	d
RL_DEFAULT_SHADER_ATTRIB_NAME_COLOR	rlgl.h	/^    #define RL_DEFAULT_SHADER_ATTRIB_NAME_COLOR /;"	d
RL_DEFAULT_SHADER_ATTRIB_NAME_NORMAL	rlgl.h	/^    #define RL_DEFAULT_SHADER_ATTRIB_NAME_NORMAL /;"	d
RL_DEFAULT_SHADER_ATTRIB_NAME_POSITION	rlgl.h	/^    #define RL_DEFAULT_SHADER_ATTRIB_NAME_POSITION /;"	d
RL_DEFAULT_SHADER_ATTRIB_NAME_TANGENT	rlgl.h	/^    #define RL_DEFAULT_SHADER_ATTRIB_NAME_TANGENT /;"	d
RL_DEFAULT_SHADER_ATTRIB_NAME_TEXCOORD	rlgl.h	/^    #define RL_DEFAULT_SHADER_ATTRIB_NAME_TEXCOORD /;"	d
RL_DEFAULT_SHADER_ATTRIB_NAME_TEXCOORD2	rlgl.h	/^    #define RL_DEFAULT_SHADER_ATTRIB_NAME_TEXCOORD2 /;"	d
RL_DEFAULT_SHADER_SAMPLER2D_NAME_TEXTURE0	rlgl.h	/^    #define RL_DEFAULT_SHADER_SAMPLER2D_NAME_TEXTURE0 /;"	d
RL_DEFAULT_SHADER_SAMPLER2D_NAME_TEXTURE1	rlgl.h	/^    #define RL_DEFAULT_SHADER_SAMPLER2D_NAME_TEXTURE1 /;"	d
RL_DEFAULT_SHADER_SAMPLER2D_NAME_TEXTURE2	rlgl.h	/^    #define RL_DEFAULT_SHADER_SAMPLER2D_NAME_TEXTURE2 /;"	d
RL_DEFAULT_SHADER_UNIFORM_NAME_COLOR	rlgl.h	/^    #define RL_DEFAULT_SHADER_UNIFORM_NAME_COLOR /;"	d
RL_DEFAULT_SHADER_UNIFORM_NAME_MODEL	rlgl.h	/^    #define RL_DEFAULT_SHADER_UNIFORM_NAME_MODEL /;"	d
RL_DEFAULT_SHADER_UNIFORM_NAME_MVP	rlgl.h	/^    #define RL_DEFAULT_SHADER_UNIFORM_NAME_MVP /;"	d
RL_DEFAULT_SHADER_UNIFORM_NAME_NORMAL	rlgl.h	/^    #define RL_DEFAULT_SHADER_UNIFORM_NAME_NORMAL /;"	d
RL_DEFAULT_SHADER_UNIFORM_NAME_PROJECTION	rlgl.h	/^    #define RL_DEFAULT_SHADER_UNIFORM_NAME_PROJECTION /;"	d
RL_DEFAULT_SHADER_UNIFORM_NAME_VIEW	rlgl.h	/^    #define RL_DEFAULT_SHADER_UNIFORM_NAME_VIEW /;"	d
RL_DST_ALPHA	rlgl.h	/^#define RL_DST_ALPHA /;"	d
RL_DST_COLOR	rlgl.h	/^#define RL_DST_COLOR /;"	d
RL_DYNAMIC_COPY	rlgl.h	/^#define RL_DYNAMIC_COPY /;"	d
RL_DYNAMIC_DRAW	rlgl.h	/^#define RL_DYNAMIC_DRAW /;"	d
RL_DYNAMIC_READ	rlgl.h	/^#define RL_DYNAMIC_READ /;"	d
RL_FLOAT	rlgl.h	/^#define RL_FLOAT /;"	d
RL_FRAGMENT_SHADER	rlgl.h	/^#define RL_FRAGMENT_SHADER /;"	d
RL_FREE	raylib.h	/^    #define RL_FREE(/;"	d
RL_FREE	rlgl.h	/^    #define RL_FREE(/;"	d
RL_FUNC_ADD	rlgl.h	/^#define RL_FUNC_ADD /;"	d
RL_FUNC_REVERSE_SUBTRACT	rlgl.h	/^#define RL_FUNC_REVERSE_SUBTRACT /;"	d
RL_FUNC_SUBTRACT	rlgl.h	/^#define RL_FUNC_SUBTRACT /;"	d
RL_LINES	rlgl.h	/^#define RL_LINES /;"	d
RL_LOG_ALL	rlgl.h	/^    RL_LOG_ALL = 0,             \/\/ Display all logs$/;"	e	enum:__anon19a7bfac0303
RL_LOG_DEBUG	rlgl.h	/^    RL_LOG_DEBUG,               \/\/ Debug logging, used for internal debugging, it should be di/;"	e	enum:__anon19a7bfac0303
RL_LOG_ERROR	rlgl.h	/^    RL_LOG_ERROR,               \/\/ Error logging, used on unrecoverable failures$/;"	e	enum:__anon19a7bfac0303
RL_LOG_FATAL	rlgl.h	/^    RL_LOG_FATAL,               \/\/ Fatal logging, used to abort program: exit(EXIT_FAILURE)$/;"	e	enum:__anon19a7bfac0303
RL_LOG_INFO	rlgl.h	/^    RL_LOG_INFO,                \/\/ Info logging, used for program execution info$/;"	e	enum:__anon19a7bfac0303
RL_LOG_NONE	rlgl.h	/^    RL_LOG_NONE                 \/\/ Disable logging$/;"	e	enum:__anon19a7bfac0303
RL_LOG_TRACE	rlgl.h	/^    RL_LOG_TRACE,               \/\/ Trace logging, intended for internal use only$/;"	e	enum:__anon19a7bfac0303
RL_LOG_WARNING	rlgl.h	/^    RL_LOG_WARNING,             \/\/ Warning logging, used on recoverable failures$/;"	e	enum:__anon19a7bfac0303
RL_MALLOC	raylib.h	/^    #define RL_MALLOC(/;"	d
RL_MALLOC	rlgl.h	/^    #define RL_MALLOC(/;"	d
RL_MATRIX_TYPE	raylib.h	/^#define RL_MATRIX_TYPE$/;"	d
RL_MATRIX_TYPE	raymath.h	/^#define RL_MATRIX_TYPE$/;"	d
RL_MATRIX_TYPE	rlgl.h	/^#define RL_MATRIX_TYPE$/;"	d
RL_MAX	rlgl.h	/^#define RL_MAX /;"	d
RL_MAX_MATRIX_STACK_SIZE	rlgl.h	/^    #define RL_MAX_MATRIX_STACK_SIZE /;"	d
RL_MAX_SHADER_LOCATIONS	rlgl.h	/^    #define RL_MAX_SHADER_LOCATIONS /;"	d
RL_MIN	rlgl.h	/^#define RL_MIN /;"	d
RL_MODELVIEW	rlgl.h	/^#define RL_MODELVIEW /;"	d
RL_ONE	rlgl.h	/^#define RL_ONE /;"	d
RL_ONE_MINUS_CONSTANT_ALPHA	rlgl.h	/^#define RL_ONE_MINUS_CONSTANT_ALPHA /;"	d
RL_ONE_MINUS_CONSTANT_COLOR	rlgl.h	/^#define RL_ONE_MINUS_CONSTANT_COLOR /;"	d
RL_ONE_MINUS_DST_ALPHA	rlgl.h	/^#define RL_ONE_MINUS_DST_ALPHA /;"	d
RL_ONE_MINUS_DST_COLOR	rlgl.h	/^#define RL_ONE_MINUS_DST_COLOR /;"	d
RL_ONE_MINUS_SRC_ALPHA	rlgl.h	/^#define RL_ONE_MINUS_SRC_ALPHA /;"	d
RL_ONE_MINUS_SRC_COLOR	rlgl.h	/^#define RL_ONE_MINUS_SRC_COLOR /;"	d
RL_OPENGL_11	rlgl.h	/^    RL_OPENGL_11 = 1,           \/\/ OpenGL 1.1$/;"	e	enum:__anon19a7bfac0203
RL_OPENGL_21	rlgl.h	/^    RL_OPENGL_21,               \/\/ OpenGL 2.1 (GLSL 120)$/;"	e	enum:__anon19a7bfac0203
RL_OPENGL_33	rlgl.h	/^    RL_OPENGL_33,               \/\/ OpenGL 3.3 (GLSL 330)$/;"	e	enum:__anon19a7bfac0203
RL_OPENGL_43	rlgl.h	/^    RL_OPENGL_43,               \/\/ OpenGL 4.3 (using GLSL 330)$/;"	e	enum:__anon19a7bfac0203
RL_OPENGL_ES_20	rlgl.h	/^    RL_OPENGL_ES_20,            \/\/ OpenGL ES 2.0 (GLSL 100)$/;"	e	enum:__anon19a7bfac0203
RL_OPENGL_ES_30	rlgl.h	/^    RL_OPENGL_ES_30             \/\/ OpenGL ES 3.0 (GLSL 300 es)$/;"	e	enum:__anon19a7bfac0203
RL_PIXELFORMAT_COMPRESSED_ASTC_4x4_RGBA	rlgl.h	/^    RL_PIXELFORMAT_COMPRESSED_ASTC_4x4_RGBA,       \/\/ 8 bpp$/;"	e	enum:__anon19a7bfac0403
RL_PIXELFORMAT_COMPRESSED_ASTC_8x8_RGBA	rlgl.h	/^    RL_PIXELFORMAT_COMPRESSED_ASTC_8x8_RGBA        \/\/ 2 bpp$/;"	e	enum:__anon19a7bfac0403
RL_PIXELFORMAT_COMPRESSED_DXT1_RGB	rlgl.h	/^    RL_PIXELFORMAT_COMPRESSED_DXT1_RGB,            \/\/ 4 bpp (no alpha)$/;"	e	enum:__anon19a7bfac0403
RL_PIXELFORMAT_COMPRESSED_DXT1_RGBA	rlgl.h	/^    RL_PIXELFORMAT_COMPRESSED_DXT1_RGBA,           \/\/ 4 bpp (1 bit alpha)$/;"	e	enum:__anon19a7bfac0403
RL_PIXELFORMAT_COMPRESSED_DXT3_RGBA	rlgl.h	/^    RL_PIXELFORMAT_COMPRESSED_DXT3_RGBA,           \/\/ 8 bpp$/;"	e	enum:__anon19a7bfac0403
RL_PIXELFORMAT_COMPRESSED_DXT5_RGBA	rlgl.h	/^    RL_PIXELFORMAT_COMPRESSED_DXT5_RGBA,           \/\/ 8 bpp$/;"	e	enum:__anon19a7bfac0403
RL_PIXELFORMAT_COMPRESSED_ETC1_RGB	rlgl.h	/^    RL_PIXELFORMAT_COMPRESSED_ETC1_RGB,            \/\/ 4 bpp$/;"	e	enum:__anon19a7bfac0403
RL_PIXELFORMAT_COMPRESSED_ETC2_EAC_RGBA	rlgl.h	/^    RL_PIXELFORMAT_COMPRESSED_ETC2_EAC_RGBA,       \/\/ 8 bpp$/;"	e	enum:__anon19a7bfac0403
RL_PIXELFORMAT_COMPRESSED_ETC2_RGB	rlgl.h	/^    RL_PIXELFORMAT_COMPRESSED_ETC2_RGB,            \/\/ 4 bpp$/;"	e	enum:__anon19a7bfac0403
RL_PIXELFORMAT_COMPRESSED_PVRT_RGB	rlgl.h	/^    RL_PIXELFORMAT_COMPRESSED_PVRT_RGB,            \/\/ 4 bpp$/;"	e	enum:__anon19a7bfac0403
RL_PIXELFORMAT_COMPRESSED_PVRT_RGBA	rlgl.h	/^    RL_PIXELFORMAT_COMPRESSED_PVRT_RGBA,           \/\/ 4 bpp$/;"	e	enum:__anon19a7bfac0403
RL_PIXELFORMAT_UNCOMPRESSED_GRAYSCALE	rlgl.h	/^    RL_PIXELFORMAT_UNCOMPRESSED_GRAYSCALE = 1,     \/\/ 8 bit per pixel (no alpha)$/;"	e	enum:__anon19a7bfac0403
RL_PIXELFORMAT_UNCOMPRESSED_GRAY_ALPHA	rlgl.h	/^    RL_PIXELFORMAT_UNCOMPRESSED_GRAY_ALPHA,        \/\/ 8*2 bpp (2 channels)$/;"	e	enum:__anon19a7bfac0403
RL_PIXELFORMAT_UNCOMPRESSED_R16	rlgl.h	/^    RL_PIXELFORMAT_UNCOMPRESSED_R16,               \/\/ 16 bpp (1 channel - half float)$/;"	e	enum:__anon19a7bfac0403
RL_PIXELFORMAT_UNCOMPRESSED_R16G16B16	rlgl.h	/^    RL_PIXELFORMAT_UNCOMPRESSED_R16G16B16,         \/\/ 16*3 bpp (3 channels - half float)$/;"	e	enum:__anon19a7bfac0403
RL_PIXELFORMAT_UNCOMPRESSED_R16G16B16A16	rlgl.h	/^    RL_PIXELFORMAT_UNCOMPRESSED_R16G16B16A16,      \/\/ 16*4 bpp (4 channels - half float)$/;"	e	enum:__anon19a7bfac0403
RL_PIXELFORMAT_UNCOMPRESSED_R32	rlgl.h	/^    RL_PIXELFORMAT_UNCOMPRESSED_R32,               \/\/ 32 bpp (1 channel - float)$/;"	e	enum:__anon19a7bfac0403
RL_PIXELFORMAT_UNCOMPRESSED_R32G32B32	rlgl.h	/^    RL_PIXELFORMAT_UNCOMPRESSED_R32G32B32,         \/\/ 32*3 bpp (3 channels - float)$/;"	e	enum:__anon19a7bfac0403
RL_PIXELFORMAT_UNCOMPRESSED_R32G32B32A32	rlgl.h	/^    RL_PIXELFORMAT_UNCOMPRESSED_R32G32B32A32,      \/\/ 32*4 bpp (4 channels - float)$/;"	e	enum:__anon19a7bfac0403
RL_PIXELFORMAT_UNCOMPRESSED_R4G4B4A4	rlgl.h	/^    RL_PIXELFORMAT_UNCOMPRESSED_R4G4B4A4,          \/\/ 16 bpp (4 bit alpha)$/;"	e	enum:__anon19a7bfac0403
RL_PIXELFORMAT_UNCOMPRESSED_R5G5B5A1	rlgl.h	/^    RL_PIXELFORMAT_UNCOMPRESSED_R5G5B5A1,          \/\/ 16 bpp (1 bit alpha)$/;"	e	enum:__anon19a7bfac0403
RL_PIXELFORMAT_UNCOMPRESSED_R5G6B5	rlgl.h	/^    RL_PIXELFORMAT_UNCOMPRESSED_R5G6B5,            \/\/ 16 bpp$/;"	e	enum:__anon19a7bfac0403
RL_PIXELFORMAT_UNCOMPRESSED_R8G8B8	rlgl.h	/^    RL_PIXELFORMAT_UNCOMPRESSED_R8G8B8,            \/\/ 24 bpp$/;"	e	enum:__anon19a7bfac0403
RL_PIXELFORMAT_UNCOMPRESSED_R8G8B8A8	rlgl.h	/^    RL_PIXELFORMAT_UNCOMPRESSED_R8G8B8A8,          \/\/ 32 bpp$/;"	e	enum:__anon19a7bfac0403
RL_PROJECTION	rlgl.h	/^#define RL_PROJECTION /;"	d
RL_QUADS	rlgl.h	/^#define RL_QUADS /;"	d
RL_QUATERNION_TYPE	raylib.h	/^#define RL_QUATERNION_TYPE$/;"	d
RL_QUATERNION_TYPE	raymath.h	/^#define RL_QUATERNION_TYPE$/;"	d
RL_REALLOC	raylib.h	/^    #define RL_REALLOC(/;"	d
RL_REALLOC	rlgl.h	/^    #define RL_REALLOC(/;"	d
RL_RECTANGLE_TYPE	raylib.h	/^#define RL_RECTANGLE_TYPE$/;"	d
RL_SHADER_ATTRIB_FLOAT	rlgl.h	/^    RL_SHADER_ATTRIB_FLOAT = 0,         \/\/ Shader attribute type: float$/;"	e	enum:__anon19a7bfac0903
RL_SHADER_ATTRIB_VEC2	rlgl.h	/^    RL_SHADER_ATTRIB_VEC2,              \/\/ Shader attribute type: vec2 (2 float)$/;"	e	enum:__anon19a7bfac0903
RL_SHADER_ATTRIB_VEC3	rlgl.h	/^    RL_SHADER_ATTRIB_VEC3,              \/\/ Shader attribute type: vec3 (3 float)$/;"	e	enum:__anon19a7bfac0903
RL_SHADER_ATTRIB_VEC4	rlgl.h	/^    RL_SHADER_ATTRIB_VEC4               \/\/ Shader attribute type: vec4 (4 float)$/;"	e	enum:__anon19a7bfac0903
RL_SHADER_LOC_COLOR_AMBIENT	rlgl.h	/^    RL_SHADER_LOC_COLOR_AMBIENT,        \/\/ Shader location: vector uniform: ambient color$/;"	e	enum:__anon19a7bfac0703
RL_SHADER_LOC_COLOR_DIFFUSE	rlgl.h	/^    RL_SHADER_LOC_COLOR_DIFFUSE,        \/\/ Shader location: vector uniform: diffuse color$/;"	e	enum:__anon19a7bfac0703
RL_SHADER_LOC_COLOR_SPECULAR	rlgl.h	/^    RL_SHADER_LOC_COLOR_SPECULAR,       \/\/ Shader location: vector uniform: specular color$/;"	e	enum:__anon19a7bfac0703
RL_SHADER_LOC_MAP_ALBEDO	rlgl.h	/^    RL_SHADER_LOC_MAP_ALBEDO,           \/\/ Shader location: sampler2d texture: albedo (same as/;"	e	enum:__anon19a7bfac0703
RL_SHADER_LOC_MAP_BRDF	rlgl.h	/^    RL_SHADER_LOC_MAP_BRDF              \/\/ Shader location: sampler2d texture: brdf$/;"	e	enum:__anon19a7bfac0703
RL_SHADER_LOC_MAP_CUBEMAP	rlgl.h	/^    RL_SHADER_LOC_MAP_CUBEMAP,          \/\/ Shader location: samplerCube texture: cubemap$/;"	e	enum:__anon19a7bfac0703
RL_SHADER_LOC_MAP_DIFFUSE	rlgl.h	/^#define RL_SHADER_LOC_MAP_DIFFUSE /;"	d
RL_SHADER_LOC_MAP_EMISSION	rlgl.h	/^    RL_SHADER_LOC_MAP_EMISSION,         \/\/ Shader location: sampler2d texture: emission$/;"	e	enum:__anon19a7bfac0703
RL_SHADER_LOC_MAP_HEIGHT	rlgl.h	/^    RL_SHADER_LOC_MAP_HEIGHT,           \/\/ Shader location: sampler2d texture: height$/;"	e	enum:__anon19a7bfac0703
RL_SHADER_LOC_MAP_IRRADIANCE	rlgl.h	/^    RL_SHADER_LOC_MAP_IRRADIANCE,       \/\/ Shader location: samplerCube texture: irradiance$/;"	e	enum:__anon19a7bfac0703
RL_SHADER_LOC_MAP_METALNESS	rlgl.h	/^    RL_SHADER_LOC_MAP_METALNESS,        \/\/ Shader location: sampler2d texture: metalness (same/;"	e	enum:__anon19a7bfac0703
RL_SHADER_LOC_MAP_NORMAL	rlgl.h	/^    RL_SHADER_LOC_MAP_NORMAL,           \/\/ Shader location: sampler2d texture: normal$/;"	e	enum:__anon19a7bfac0703
RL_SHADER_LOC_MAP_OCCLUSION	rlgl.h	/^    RL_SHADER_LOC_MAP_OCCLUSION,        \/\/ Shader location: sampler2d texture: occlusion$/;"	e	enum:__anon19a7bfac0703
RL_SHADER_LOC_MAP_PREFILTER	rlgl.h	/^    RL_SHADER_LOC_MAP_PREFILTER,        \/\/ Shader location: samplerCube texture: prefilter$/;"	e	enum:__anon19a7bfac0703
RL_SHADER_LOC_MAP_ROUGHNESS	rlgl.h	/^    RL_SHADER_LOC_MAP_ROUGHNESS,        \/\/ Shader location: sampler2d texture: roughness$/;"	e	enum:__anon19a7bfac0703
RL_SHADER_LOC_MAP_SPECULAR	rlgl.h	/^#define RL_SHADER_LOC_MAP_SPECULAR /;"	d
RL_SHADER_LOC_MATRIX_MODEL	rlgl.h	/^    RL_SHADER_LOC_MATRIX_MODEL,         \/\/ Shader location: matrix uniform: model (transform)$/;"	e	enum:__anon19a7bfac0703
RL_SHADER_LOC_MATRIX_MVP	rlgl.h	/^    RL_SHADER_LOC_MATRIX_MVP,           \/\/ Shader location: matrix uniform: model-view-project/;"	e	enum:__anon19a7bfac0703
RL_SHADER_LOC_MATRIX_NORMAL	rlgl.h	/^    RL_SHADER_LOC_MATRIX_NORMAL,        \/\/ Shader location: matrix uniform: normal$/;"	e	enum:__anon19a7bfac0703
RL_SHADER_LOC_MATRIX_PROJECTION	rlgl.h	/^    RL_SHADER_LOC_MATRIX_PROJECTION,    \/\/ Shader location: matrix uniform: projection$/;"	e	enum:__anon19a7bfac0703
RL_SHADER_LOC_MATRIX_VIEW	rlgl.h	/^    RL_SHADER_LOC_MATRIX_VIEW,          \/\/ Shader location: matrix uniform: view (camera trans/;"	e	enum:__anon19a7bfac0703
RL_SHADER_LOC_VECTOR_VIEW	rlgl.h	/^    RL_SHADER_LOC_VECTOR_VIEW,          \/\/ Shader location: vector uniform: view$/;"	e	enum:__anon19a7bfac0703
RL_SHADER_LOC_VERTEX_COLOR	rlgl.h	/^    RL_SHADER_LOC_VERTEX_COLOR,         \/\/ Shader location: vertex attribute: color$/;"	e	enum:__anon19a7bfac0703
RL_SHADER_LOC_VERTEX_NORMAL	rlgl.h	/^    RL_SHADER_LOC_VERTEX_NORMAL,        \/\/ Shader location: vertex attribute: normal$/;"	e	enum:__anon19a7bfac0703
RL_SHADER_LOC_VERTEX_POSITION	rlgl.h	/^    RL_SHADER_LOC_VERTEX_POSITION = 0,  \/\/ Shader location: vertex attribute: position$/;"	e	enum:__anon19a7bfac0703
RL_SHADER_LOC_VERTEX_TANGENT	rlgl.h	/^    RL_SHADER_LOC_VERTEX_TANGENT,       \/\/ Shader location: vertex attribute: tangent$/;"	e	enum:__anon19a7bfac0703
RL_SHADER_LOC_VERTEX_TEXCOORD01	rlgl.h	/^    RL_SHADER_LOC_VERTEX_TEXCOORD01,    \/\/ Shader location: vertex attribute: texcoord01$/;"	e	enum:__anon19a7bfac0703
RL_SHADER_LOC_VERTEX_TEXCOORD02	rlgl.h	/^    RL_SHADER_LOC_VERTEX_TEXCOORD02,    \/\/ Shader location: vertex attribute: texcoord02$/;"	e	enum:__anon19a7bfac0703
RL_SHADER_UNIFORM_FLOAT	rlgl.h	/^    RL_SHADER_UNIFORM_FLOAT = 0,        \/\/ Shader uniform type: float$/;"	e	enum:__anon19a7bfac0803
RL_SHADER_UNIFORM_INT	rlgl.h	/^    RL_SHADER_UNIFORM_INT,              \/\/ Shader uniform type: int$/;"	e	enum:__anon19a7bfac0803
RL_SHADER_UNIFORM_IVEC2	rlgl.h	/^    RL_SHADER_UNIFORM_IVEC2,            \/\/ Shader uniform type: ivec2 (2 int)$/;"	e	enum:__anon19a7bfac0803
RL_SHADER_UNIFORM_IVEC3	rlgl.h	/^    RL_SHADER_UNIFORM_IVEC3,            \/\/ Shader uniform type: ivec3 (3 int)$/;"	e	enum:__anon19a7bfac0803
RL_SHADER_UNIFORM_IVEC4	rlgl.h	/^    RL_SHADER_UNIFORM_IVEC4,            \/\/ Shader uniform type: ivec4 (4 int)$/;"	e	enum:__anon19a7bfac0803
RL_SHADER_UNIFORM_SAMPLER2D	rlgl.h	/^    RL_SHADER_UNIFORM_SAMPLER2D         \/\/ Shader uniform type: sampler2d$/;"	e	enum:__anon19a7bfac0803
RL_SHADER_UNIFORM_VEC2	rlgl.h	/^    RL_SHADER_UNIFORM_VEC2,             \/\/ Shader uniform type: vec2 (2 float)$/;"	e	enum:__anon19a7bfac0803
RL_SHADER_UNIFORM_VEC3	rlgl.h	/^    RL_SHADER_UNIFORM_VEC3,             \/\/ Shader uniform type: vec3 (3 float)$/;"	e	enum:__anon19a7bfac0803
RL_SHADER_UNIFORM_VEC4	rlgl.h	/^    RL_SHADER_UNIFORM_VEC4,             \/\/ Shader uniform type: vec4 (4 float)$/;"	e	enum:__anon19a7bfac0803
RL_SRC_ALPHA	rlgl.h	/^#define RL_SRC_ALPHA /;"	d
RL_SRC_ALPHA_SATURATE	rlgl.h	/^#define RL_SRC_ALPHA_SATURATE /;"	d
RL_SRC_COLOR	rlgl.h	/^#define RL_SRC_COLOR /;"	d
RL_STATIC_COPY	rlgl.h	/^#define RL_STATIC_COPY /;"	d
RL_STATIC_DRAW	rlgl.h	/^#define RL_STATIC_DRAW /;"	d
RL_STATIC_READ	rlgl.h	/^#define RL_STATIC_READ /;"	d
RL_STREAM_COPY	rlgl.h	/^#define RL_STREAM_COPY /;"	d
RL_STREAM_DRAW	rlgl.h	/^#define RL_STREAM_DRAW /;"	d
RL_STREAM_READ	rlgl.h	/^#define RL_STREAM_READ /;"	d
RL_TEXTURE	rlgl.h	/^#define RL_TEXTURE /;"	d
RL_TEXTURE_FILTER_ANISOTROPIC	rlgl.h	/^#define RL_TEXTURE_FILTER_ANISOTROPIC /;"	d
RL_TEXTURE_FILTER_ANISOTROPIC_16X	rlgl.h	/^    RL_TEXTURE_FILTER_ANISOTROPIC_16X,  \/\/ Anisotropic filtering 16x$/;"	e	enum:__anon19a7bfac0503
RL_TEXTURE_FILTER_ANISOTROPIC_4X	rlgl.h	/^    RL_TEXTURE_FILTER_ANISOTROPIC_4X,   \/\/ Anisotropic filtering 4x$/;"	e	enum:__anon19a7bfac0503
RL_TEXTURE_FILTER_ANISOTROPIC_8X	rlgl.h	/^    RL_TEXTURE_FILTER_ANISOTROPIC_8X,   \/\/ Anisotropic filtering 8x$/;"	e	enum:__anon19a7bfac0503
RL_TEXTURE_FILTER_BILINEAR	rlgl.h	/^    RL_TEXTURE_FILTER_BILINEAR,         \/\/ Linear filtering$/;"	e	enum:__anon19a7bfac0503
RL_TEXTURE_FILTER_LINEAR	rlgl.h	/^#define RL_TEXTURE_FILTER_LINEAR /;"	d
RL_TEXTURE_FILTER_LINEAR_MIP_NEAREST	rlgl.h	/^#define RL_TEXTURE_FILTER_LINEAR_MIP_NEAREST /;"	d
RL_TEXTURE_FILTER_MIP_LINEAR	rlgl.h	/^#define RL_TEXTURE_FILTER_MIP_LINEAR /;"	d
RL_TEXTURE_FILTER_MIP_NEAREST	rlgl.h	/^#define RL_TEXTURE_FILTER_MIP_NEAREST /;"	d
RL_TEXTURE_FILTER_NEAREST	rlgl.h	/^#define RL_TEXTURE_FILTER_NEAREST /;"	d
RL_TEXTURE_FILTER_NEAREST_MIP_LINEAR	rlgl.h	/^#define RL_TEXTURE_FILTER_NEAREST_MIP_LINEAR /;"	d
RL_TEXTURE_FILTER_POINT	rlgl.h	/^    RL_TEXTURE_FILTER_POINT = 0,        \/\/ No filter, just pixel approximation$/;"	e	enum:__anon19a7bfac0503
RL_TEXTURE_FILTER_TRILINEAR	rlgl.h	/^    RL_TEXTURE_FILTER_TRILINEAR,        \/\/ Trilinear filtering (linear with mipmaps)$/;"	e	enum:__anon19a7bfac0503
RL_TEXTURE_MAG_FILTER	rlgl.h	/^#define RL_TEXTURE_MAG_FILTER /;"	d
RL_TEXTURE_MIN_FILTER	rlgl.h	/^#define RL_TEXTURE_MIN_FILTER /;"	d
RL_TEXTURE_MIPMAP_BIAS_RATIO	rlgl.h	/^#define RL_TEXTURE_MIPMAP_BIAS_RATIO /;"	d
RL_TEXTURE_WRAP_CLAMP	rlgl.h	/^#define RL_TEXTURE_WRAP_CLAMP /;"	d
RL_TEXTURE_WRAP_MIRROR_CLAMP	rlgl.h	/^#define RL_TEXTURE_WRAP_MIRROR_CLAMP /;"	d
RL_TEXTURE_WRAP_MIRROR_REPEAT	rlgl.h	/^#define RL_TEXTURE_WRAP_MIRROR_REPEAT /;"	d
RL_TEXTURE_WRAP_REPEAT	rlgl.h	/^#define RL_TEXTURE_WRAP_REPEAT /;"	d
RL_TEXTURE_WRAP_S	rlgl.h	/^#define RL_TEXTURE_WRAP_S /;"	d
RL_TEXTURE_WRAP_T	rlgl.h	/^#define RL_TEXTURE_WRAP_T /;"	d
RL_TRIANGLES	rlgl.h	/^#define RL_TRIANGLES /;"	d
RL_UNSIGNED_BYTE	rlgl.h	/^#define RL_UNSIGNED_BYTE /;"	d
RL_VECTOR2_TYPE	raylib.h	/^#define RL_VECTOR2_TYPE$/;"	d
RL_VECTOR2_TYPE	raymath.h	/^#define RL_VECTOR2_TYPE$/;"	d
RL_VECTOR3_TYPE	raylib.h	/^#define RL_VECTOR3_TYPE$/;"	d
RL_VECTOR3_TYPE	raymath.h	/^#define RL_VECTOR3_TYPE$/;"	d
RL_VECTOR4_TYPE	raylib.h	/^#define RL_VECTOR4_TYPE$/;"	d
RL_VECTOR4_TYPE	raymath.h	/^#define RL_VECTOR4_TYPE$/;"	d
RL_VERTEX_SHADER	rlgl.h	/^#define RL_VERTEX_SHADER /;"	d
RL_ZERO	rlgl.h	/^#define RL_ZERO /;"	d
RMAPI	raymath.h	/^        #define RMAPI /;"	d
RMAPI	raymath.h	/^    #define RMAPI /;"	d
Ray	raylib.h	/^typedef struct Ray {$/;"	s
Ray	raylib.h	/^} Ray;$/;"	t	typeref:struct:Ray
RayCollision	raylib.h	/^typedef struct RayCollision {$/;"	s
RayCollision	raylib.h	/^} RayCollision;$/;"	t	typeref:struct:RayCollision
Rectangle	raylib.h	/^typedef struct Rectangle {$/;"	s
Rectangle	raylib.h	/^} Rectangle;$/;"	t	typeref:struct:Rectangle
Remap	raymath.h	/^RMAPI float Remap(float value, float inputStart, float inputEnd, float outputStart, float output/;"	f	typeref:typename:RMAPI float
RenderTexture	raylib.h	/^typedef struct RenderTexture {$/;"	s
RenderTexture	raylib.h	/^} RenderTexture;$/;"	t	typeref:struct:RenderTexture
RenderTexture2D	raylib.h	/^typedef RenderTexture RenderTexture2D;$/;"	t	typeref:typename:RenderTexture
SHADER_ATTRIB_FLOAT	raylib.h	/^    SHADER_ATTRIB_FLOAT = 0,        \/\/ Shader attribute type: float$/;"	e	enum:__anonfdf2e0de0c03
SHADER_ATTRIB_VEC2	raylib.h	/^    SHADER_ATTRIB_VEC2,             \/\/ Shader attribute type: vec2 (2 float)$/;"	e	enum:__anonfdf2e0de0c03
SHADER_ATTRIB_VEC3	raylib.h	/^    SHADER_ATTRIB_VEC3,             \/\/ Shader attribute type: vec3 (3 float)$/;"	e	enum:__anonfdf2e0de0c03
SHADER_ATTRIB_VEC4	raylib.h	/^    SHADER_ATTRIB_VEC4              \/\/ Shader attribute type: vec4 (4 float)$/;"	e	enum:__anonfdf2e0de0c03
SHADER_LOC_COLOR_AMBIENT	raylib.h	/^    SHADER_LOC_COLOR_AMBIENT,       \/\/ Shader location: vector uniform: ambient color$/;"	e	enum:__anonfdf2e0de0a03
SHADER_LOC_COLOR_DIFFUSE	raylib.h	/^    SHADER_LOC_COLOR_DIFFUSE,       \/\/ Shader location: vector uniform: diffuse color$/;"	e	enum:__anonfdf2e0de0a03
SHADER_LOC_COLOR_SPECULAR	raylib.h	/^    SHADER_LOC_COLOR_SPECULAR,      \/\/ Shader location: vector uniform: specular color$/;"	e	enum:__anonfdf2e0de0a03
SHADER_LOC_MAP_ALBEDO	raylib.h	/^    SHADER_LOC_MAP_ALBEDO,          \/\/ Shader location: sampler2d texture: albedo (same as: SH/;"	e	enum:__anonfdf2e0de0a03
SHADER_LOC_MAP_BRDF	raylib.h	/^    SHADER_LOC_MAP_BRDF             \/\/ Shader location: sampler2d texture: brdf$/;"	e	enum:__anonfdf2e0de0a03
SHADER_LOC_MAP_CUBEMAP	raylib.h	/^    SHADER_LOC_MAP_CUBEMAP,         \/\/ Shader location: samplerCube texture: cubemap$/;"	e	enum:__anonfdf2e0de0a03
SHADER_LOC_MAP_DIFFUSE	raylib.h	/^#define SHADER_LOC_MAP_DIFFUSE /;"	d
SHADER_LOC_MAP_EMISSION	raylib.h	/^    SHADER_LOC_MAP_EMISSION,        \/\/ Shader location: sampler2d texture: emission$/;"	e	enum:__anonfdf2e0de0a03
SHADER_LOC_MAP_HEIGHT	raylib.h	/^    SHADER_LOC_MAP_HEIGHT,          \/\/ Shader location: sampler2d texture: height$/;"	e	enum:__anonfdf2e0de0a03
SHADER_LOC_MAP_IRRADIANCE	raylib.h	/^    SHADER_LOC_MAP_IRRADIANCE,      \/\/ Shader location: samplerCube texture: irradiance$/;"	e	enum:__anonfdf2e0de0a03
SHADER_LOC_MAP_METALNESS	raylib.h	/^    SHADER_LOC_MAP_METALNESS,       \/\/ Shader location: sampler2d texture: metalness (same as:/;"	e	enum:__anonfdf2e0de0a03
SHADER_LOC_MAP_NORMAL	raylib.h	/^    SHADER_LOC_MAP_NORMAL,          \/\/ Shader location: sampler2d texture: normal$/;"	e	enum:__anonfdf2e0de0a03
SHADER_LOC_MAP_OCCLUSION	raylib.h	/^    SHADER_LOC_MAP_OCCLUSION,       \/\/ Shader location: sampler2d texture: occlusion$/;"	e	enum:__anonfdf2e0de0a03
SHADER_LOC_MAP_PREFILTER	raylib.h	/^    SHADER_LOC_MAP_PREFILTER,       \/\/ Shader location: samplerCube texture: prefilter$/;"	e	enum:__anonfdf2e0de0a03
SHADER_LOC_MAP_ROUGHNESS	raylib.h	/^    SHADER_LOC_MAP_ROUGHNESS,       \/\/ Shader location: sampler2d texture: roughness$/;"	e	enum:__anonfdf2e0de0a03
SHADER_LOC_MAP_SPECULAR	raylib.h	/^#define SHADER_LOC_MAP_SPECULAR /;"	d
SHADER_LOC_MATRIX_MODEL	raylib.h	/^    SHADER_LOC_MATRIX_MODEL,        \/\/ Shader location: matrix uniform: model (transform)$/;"	e	enum:__anonfdf2e0de0a03
SHADER_LOC_MATRIX_MVP	raylib.h	/^    SHADER_LOC_MATRIX_MVP,          \/\/ Shader location: matrix uniform: model-view-projection$/;"	e	enum:__anonfdf2e0de0a03
SHADER_LOC_MATRIX_NORMAL	raylib.h	/^    SHADER_LOC_MATRIX_NORMAL,       \/\/ Shader location: matrix uniform: normal$/;"	e	enum:__anonfdf2e0de0a03
SHADER_LOC_MATRIX_PROJECTION	raylib.h	/^    SHADER_LOC_MATRIX_PROJECTION,   \/\/ Shader location: matrix uniform: projection$/;"	e	enum:__anonfdf2e0de0a03
SHADER_LOC_MATRIX_VIEW	raylib.h	/^    SHADER_LOC_MATRIX_VIEW,         \/\/ Shader location: matrix uniform: view (camera transform/;"	e	enum:__anonfdf2e0de0a03
SHADER_LOC_VECTOR_VIEW	raylib.h	/^    SHADER_LOC_VECTOR_VIEW,         \/\/ Shader location: vector uniform: view$/;"	e	enum:__anonfdf2e0de0a03
SHADER_LOC_VERTEX_COLOR	raylib.h	/^    SHADER_LOC_VERTEX_COLOR,        \/\/ Shader location: vertex attribute: color$/;"	e	enum:__anonfdf2e0de0a03
SHADER_LOC_VERTEX_NORMAL	raylib.h	/^    SHADER_LOC_VERTEX_NORMAL,       \/\/ Shader location: vertex attribute: normal$/;"	e	enum:__anonfdf2e0de0a03
SHADER_LOC_VERTEX_POSITION	raylib.h	/^    SHADER_LOC_VERTEX_POSITION = 0, \/\/ Shader location: vertex attribute: position$/;"	e	enum:__anonfdf2e0de0a03
SHADER_LOC_VERTEX_TANGENT	raylib.h	/^    SHADER_LOC_VERTEX_TANGENT,      \/\/ Shader location: vertex attribute: tangent$/;"	e	enum:__anonfdf2e0de0a03
SHADER_LOC_VERTEX_TEXCOORD01	raylib.h	/^    SHADER_LOC_VERTEX_TEXCOORD01,   \/\/ Shader location: vertex attribute: texcoord01$/;"	e	enum:__anonfdf2e0de0a03
SHADER_LOC_VERTEX_TEXCOORD02	raylib.h	/^    SHADER_LOC_VERTEX_TEXCOORD02,   \/\/ Shader location: vertex attribute: texcoord02$/;"	e	enum:__anonfdf2e0de0a03
SHADER_UNIFORM_FLOAT	raylib.h	/^    SHADER_UNIFORM_FLOAT = 0,       \/\/ Shader uniform type: float$/;"	e	enum:__anonfdf2e0de0b03
SHADER_UNIFORM_INT	raylib.h	/^    SHADER_UNIFORM_INT,             \/\/ Shader uniform type: int$/;"	e	enum:__anonfdf2e0de0b03
SHADER_UNIFORM_IVEC2	raylib.h	/^    SHADER_UNIFORM_IVEC2,           \/\/ Shader uniform type: ivec2 (2 int)$/;"	e	enum:__anonfdf2e0de0b03
SHADER_UNIFORM_IVEC3	raylib.h	/^    SHADER_UNIFORM_IVEC3,           \/\/ Shader uniform type: ivec3 (3 int)$/;"	e	enum:__anonfdf2e0de0b03
SHADER_UNIFORM_IVEC4	raylib.h	/^    SHADER_UNIFORM_IVEC4,           \/\/ Shader uniform type: ivec4 (4 int)$/;"	e	enum:__anonfdf2e0de0b03
SHADER_UNIFORM_SAMPLER2D	raylib.h	/^    SHADER_UNIFORM_SAMPLER2D        \/\/ Shader uniform type: sampler2d$/;"	e	enum:__anonfdf2e0de0b03
SHADER_UNIFORM_VEC2	raylib.h	/^    SHADER_UNIFORM_VEC2,            \/\/ Shader uniform type: vec2 (2 float)$/;"	e	enum:__anonfdf2e0de0b03
SHADER_UNIFORM_VEC3	raylib.h	/^    SHADER_UNIFORM_VEC3,            \/\/ Shader uniform type: vec3 (3 float)$/;"	e	enum:__anonfdf2e0de0b03
SHADER_UNIFORM_VEC4	raylib.h	/^    SHADER_UNIFORM_VEC4,            \/\/ Shader uniform type: vec4 (4 float)$/;"	e	enum:__anonfdf2e0de0b03
SKYBLUE	raylib.h	/^#define SKYBLUE /;"	d
SaveFileDataCallback	raylib.h	/^typedef bool (*SaveFileDataCallback)(const char *fileName, void *data, int dataSize);   \/\/ Fil/;"	t	typeref:typename:bool (*)(const char * fileName,void * data,int dataSize)
SaveFileTextCallback	raylib.h	/^typedef bool (*SaveFileTextCallback)(const char *fileName, char *text); \/\/ FileIO: Save text d/;"	t	typeref:typename:bool (*)(const char * fileName,char * text)
Shader	raylib.h	/^typedef struct Shader {$/;"	s
Shader	raylib.h	/^} Shader;$/;"	t	typeref:struct:Shader
ShaderAttributeDataType	raylib.h	/^} ShaderAttributeDataType;$/;"	t	typeref:enum:__anonfdf2e0de0c03
ShaderLocationIndex	raylib.h	/^} ShaderLocationIndex;$/;"	t	typeref:enum:__anonfdf2e0de0a03
ShaderUniformDataType	raylib.h	/^} ShaderUniformDataType;$/;"	t	typeref:enum:__anonfdf2e0de0b03
Sound	raylib.h	/^typedef struct Sound {$/;"	s
Sound	raylib.h	/^} Sound;$/;"	t	typeref:struct:Sound
State	rlgl.h	/^    } State;            \/\/ Renderer state$/;"	m	struct:rlglData	typeref:struct:rlglData::__anon19a7bfac0d08
TEXTURE_FILTER_ANISOTROPIC_16X	raylib.h	/^    TEXTURE_FILTER_ANISOTROPIC_16X,         \/\/ Anisotropic filtering 16x$/;"	e	enum:__anonfdf2e0de0e03
TEXTURE_FILTER_ANISOTROPIC_4X	raylib.h	/^    TEXTURE_FILTER_ANISOTROPIC_4X,          \/\/ Anisotropic filtering 4x$/;"	e	enum:__anonfdf2e0de0e03
TEXTURE_FILTER_ANISOTROPIC_8X	raylib.h	/^    TEXTURE_FILTER_ANISOTROPIC_8X,          \/\/ Anisotropic filtering 8x$/;"	e	enum:__anonfdf2e0de0e03
TEXTURE_FILTER_BILINEAR	raylib.h	/^    TEXTURE_FILTER_BILINEAR,                \/\/ Linear filtering$/;"	e	enum:__anonfdf2e0de0e03
TEXTURE_FILTER_POINT	raylib.h	/^    TEXTURE_FILTER_POINT = 0,               \/\/ No filter, just pixel approximation$/;"	e	enum:__anonfdf2e0de0e03
TEXTURE_FILTER_TRILINEAR	raylib.h	/^    TEXTURE_FILTER_TRILINEAR,               \/\/ Trilinear filtering (linear with mipmaps)$/;"	e	enum:__anonfdf2e0de0e03
TEXTURE_WRAP_CLAMP	raylib.h	/^    TEXTURE_WRAP_CLAMP,                     \/\/ Clamps texture to edge pixel in tiled mode$/;"	e	enum:__anonfdf2e0de0f03
TEXTURE_WRAP_MIRROR_CLAMP	raylib.h	/^    TEXTURE_WRAP_MIRROR_CLAMP               \/\/ Mirrors and clamps to border the texture in til/;"	e	enum:__anonfdf2e0de0f03
TEXTURE_WRAP_MIRROR_REPEAT	raylib.h	/^    TEXTURE_WRAP_MIRROR_REPEAT,             \/\/ Mirrors and repeats the texture in tiled mode$/;"	e	enum:__anonfdf2e0de0f03
TEXTURE_WRAP_REPEAT	raylib.h	/^    TEXTURE_WRAP_REPEAT = 0,                \/\/ Repeats texture in tiled mode$/;"	e	enum:__anonfdf2e0de0f03
TRACELOG	rlgl.h	/^    #define TRACELOG(/;"	d
TRACELOGD	rlgl.h	/^    #define TRACELOGD(/;"	d
Texture	raylib.h	/^typedef struct Texture {$/;"	s
Texture	raylib.h	/^} Texture;$/;"	t	typeref:struct:Texture
Texture2D	raylib.h	/^typedef Texture Texture2D;$/;"	t	typeref:typename:Texture
TextureCubemap	raylib.h	/^typedef Texture TextureCubemap;$/;"	t	typeref:typename:Texture
TextureFilter	raylib.h	/^} TextureFilter;$/;"	t	typeref:enum:__anonfdf2e0de0e03
TextureWrap	raylib.h	/^} TextureWrap;$/;"	t	typeref:enum:__anonfdf2e0de0f03
TraceLogCallback	raylib.h	/^typedef void (*TraceLogCallback)(int logLevel, const char *text, va_list args);  \/\/ Logging: R/;"	t	typeref:typename:void (*)(int logLevel,const char * text,va_list args)
TraceLogLevel	raylib.h	/^} TraceLogLevel;$/;"	t	typeref:enum:__anonfdf2e0de0303
Transform	raylib.h	/^typedef struct Transform {$/;"	s
Transform	raylib.h	/^} Transform;$/;"	t	typeref:struct:Transform
VIOLET	raylib.h	/^#define VIOLET /;"	d
Vector2	raylib.h	/^typedef struct Vector2 {$/;"	s
Vector2	raylib.h	/^} Vector2;$/;"	t	typeref:struct:Vector2
Vector2	raymath.h	/^typedef struct Vector2 {$/;"	s
Vector2	raymath.h	/^} Vector2;$/;"	t	typeref:struct:Vector2
Vector2Add	raymath.h	/^RMAPI Vector2 Vector2Add(Vector2 v1, Vector2 v2)$/;"	f	typeref:typename:RMAPI Vector2
Vector2AddValue	raymath.h	/^RMAPI Vector2 Vector2AddValue(Vector2 v, float add)$/;"	f	typeref:typename:RMAPI Vector2
Vector2Angle	raymath.h	/^RMAPI float Vector2Angle(Vector2 v1, Vector2 v2)$/;"	f	typeref:typename:RMAPI float
Vector2Clamp	raymath.h	/^RMAPI Vector2 Vector2Clamp(Vector2 v, Vector2 min, Vector2 max)$/;"	f	typeref:typename:RMAPI Vector2
Vector2ClampValue	raymath.h	/^RMAPI Vector2 Vector2ClampValue(Vector2 v, float min, float max)$/;"	f	typeref:typename:RMAPI Vector2
Vector2Distance	raymath.h	/^RMAPI float Vector2Distance(Vector2 v1, Vector2 v2)$/;"	f	typeref:typename:RMAPI float
Vector2DistanceSqr	raymath.h	/^RMAPI float Vector2DistanceSqr(Vector2 v1, Vector2 v2)$/;"	f	typeref:typename:RMAPI float
Vector2Divide	raymath.h	/^RMAPI Vector2 Vector2Divide(Vector2 v1, Vector2 v2)$/;"	f	typeref:typename:RMAPI Vector2
Vector2DotProduct	raymath.h	/^RMAPI float Vector2DotProduct(Vector2 v1, Vector2 v2)$/;"	f	typeref:typename:RMAPI float
Vector2Equals	raymath.h	/^RMAPI int Vector2Equals(Vector2 p, Vector2 q)$/;"	f	typeref:typename:RMAPI int
Vector2Invert	raymath.h	/^RMAPI Vector2 Vector2Invert(Vector2 v)$/;"	f	typeref:typename:RMAPI Vector2
Vector2Length	raymath.h	/^RMAPI float Vector2Length(Vector2 v)$/;"	f	typeref:typename:RMAPI float
Vector2LengthSqr	raymath.h	/^RMAPI float Vector2LengthSqr(Vector2 v)$/;"	f	typeref:typename:RMAPI float
Vector2Lerp	raymath.h	/^RMAPI Vector2 Vector2Lerp(Vector2 v1, Vector2 v2, float amount)$/;"	f	typeref:typename:RMAPI Vector2
Vector2LineAngle	raymath.h	/^RMAPI float Vector2LineAngle(Vector2 start, Vector2 end)$/;"	f	typeref:typename:RMAPI float
Vector2MoveTowards	raymath.h	/^RMAPI Vector2 Vector2MoveTowards(Vector2 v, Vector2 target, float maxDistance)$/;"	f	typeref:typename:RMAPI Vector2
Vector2Multiply	raymath.h	/^RMAPI Vector2 Vector2Multiply(Vector2 v1, Vector2 v2)$/;"	f	typeref:typename:RMAPI Vector2
Vector2Negate	raymath.h	/^RMAPI Vector2 Vector2Negate(Vector2 v)$/;"	f	typeref:typename:RMAPI Vector2
Vector2Normalize	raymath.h	/^RMAPI Vector2 Vector2Normalize(Vector2 v)$/;"	f	typeref:typename:RMAPI Vector2
Vector2One	raymath.h	/^RMAPI Vector2 Vector2One(void)$/;"	f	typeref:typename:RMAPI Vector2
Vector2Reflect	raymath.h	/^RMAPI Vector2 Vector2Reflect(Vector2 v, Vector2 normal)$/;"	f	typeref:typename:RMAPI Vector2
Vector2Rotate	raymath.h	/^RMAPI Vector2 Vector2Rotate(Vector2 v, float angle)$/;"	f	typeref:typename:RMAPI Vector2
Vector2Scale	raymath.h	/^RMAPI Vector2 Vector2Scale(Vector2 v, float scale)$/;"	f	typeref:typename:RMAPI Vector2
Vector2Subtract	raymath.h	/^RMAPI Vector2 Vector2Subtract(Vector2 v1, Vector2 v2)$/;"	f	typeref:typename:RMAPI Vector2
Vector2SubtractValue	raymath.h	/^RMAPI Vector2 Vector2SubtractValue(Vector2 v, float sub)$/;"	f	typeref:typename:RMAPI Vector2
Vector2Transform	raymath.h	/^RMAPI Vector2 Vector2Transform(Vector2 v, Matrix mat)$/;"	f	typeref:typename:RMAPI Vector2
Vector2Zero	raymath.h	/^RMAPI Vector2 Vector2Zero(void)$/;"	f	typeref:typename:RMAPI Vector2
Vector3	raylib.h	/^typedef struct Vector3 {$/;"	s
Vector3	raylib.h	/^} Vector3;$/;"	t	typeref:struct:Vector3
Vector3	raymath.h	/^typedef struct Vector3 {$/;"	s
Vector3	raymath.h	/^} Vector3;$/;"	t	typeref:struct:Vector3
Vector3Add	raymath.h	/^RMAPI Vector3 Vector3Add(Vector3 v1, Vector3 v2)$/;"	f	typeref:typename:RMAPI Vector3
Vector3AddValue	raymath.h	/^RMAPI Vector3 Vector3AddValue(Vector3 v, float add)$/;"	f	typeref:typename:RMAPI Vector3
Vector3Angle	raymath.h	/^RMAPI float Vector3Angle(Vector3 v1, Vector3 v2)$/;"	f	typeref:typename:RMAPI float
Vector3Barycenter	raymath.h	/^RMAPI Vector3 Vector3Barycenter(Vector3 p, Vector3 a, Vector3 b, Vector3 c)$/;"	f	typeref:typename:RMAPI Vector3
Vector3Clamp	raymath.h	/^RMAPI Vector3 Vector3Clamp(Vector3 v, Vector3 min, Vector3 max)$/;"	f	typeref:typename:RMAPI Vector3
Vector3ClampValue	raymath.h	/^RMAPI Vector3 Vector3ClampValue(Vector3 v, float min, float max)$/;"	f	typeref:typename:RMAPI Vector3
Vector3CrossProduct	raymath.h	/^RMAPI Vector3 Vector3CrossProduct(Vector3 v1, Vector3 v2)$/;"	f	typeref:typename:RMAPI Vector3
Vector3Distance	raymath.h	/^RMAPI float Vector3Distance(Vector3 v1, Vector3 v2)$/;"	f	typeref:typename:RMAPI float
Vector3DistanceSqr	raymath.h	/^RMAPI float Vector3DistanceSqr(Vector3 v1, Vector3 v2)$/;"	f	typeref:typename:RMAPI float
Vector3Divide	raymath.h	/^RMAPI Vector3 Vector3Divide(Vector3 v1, Vector3 v2)$/;"	f	typeref:typename:RMAPI Vector3
Vector3DotProduct	raymath.h	/^RMAPI float Vector3DotProduct(Vector3 v1, Vector3 v2)$/;"	f	typeref:typename:RMAPI float
Vector3Equals	raymath.h	/^RMAPI int Vector3Equals(Vector3 p, Vector3 q)$/;"	f	typeref:typename:RMAPI int
Vector3Invert	raymath.h	/^RMAPI Vector3 Vector3Invert(Vector3 v)$/;"	f	typeref:typename:RMAPI Vector3
Vector3Length	raymath.h	/^RMAPI float Vector3Length(const Vector3 v)$/;"	f	typeref:typename:RMAPI float
Vector3LengthSqr	raymath.h	/^RMAPI float Vector3LengthSqr(const Vector3 v)$/;"	f	typeref:typename:RMAPI float
Vector3Lerp	raymath.h	/^RMAPI Vector3 Vector3Lerp(Vector3 v1, Vector3 v2, float amount)$/;"	f	typeref:typename:RMAPI Vector3
Vector3Max	raymath.h	/^RMAPI Vector3 Vector3Max(Vector3 v1, Vector3 v2)$/;"	f	typeref:typename:RMAPI Vector3
Vector3Min	raymath.h	/^RMAPI Vector3 Vector3Min(Vector3 v1, Vector3 v2)$/;"	f	typeref:typename:RMAPI Vector3
Vector3Multiply	raymath.h	/^RMAPI Vector3 Vector3Multiply(Vector3 v1, Vector3 v2)$/;"	f	typeref:typename:RMAPI Vector3
Vector3Negate	raymath.h	/^RMAPI Vector3 Vector3Negate(Vector3 v)$/;"	f	typeref:typename:RMAPI Vector3
Vector3Normalize	raymath.h	/^RMAPI Vector3 Vector3Normalize(Vector3 v)$/;"	f	typeref:typename:RMAPI Vector3
Vector3One	raymath.h	/^RMAPI Vector3 Vector3One(void)$/;"	f	typeref:typename:RMAPI Vector3
Vector3OrthoNormalize	raymath.h	/^RMAPI void Vector3OrthoNormalize(Vector3 *v1, Vector3 *v2)$/;"	f	typeref:typename:RMAPI void
Vector3Perpendicular	raymath.h	/^RMAPI Vector3 Vector3Perpendicular(Vector3 v)$/;"	f	typeref:typename:RMAPI Vector3
Vector3Project	raymath.h	/^RMAPI Vector3 Vector3Project(Vector3 v1, Vector3 v2)$/;"	f	typeref:typename:RMAPI Vector3
Vector3Reflect	raymath.h	/^RMAPI Vector3 Vector3Reflect(Vector3 v, Vector3 normal)$/;"	f	typeref:typename:RMAPI Vector3
Vector3Refract	raymath.h	/^RMAPI Vector3 Vector3Refract(Vector3 v, Vector3 n, float r)$/;"	f	typeref:typename:RMAPI Vector3
Vector3Reject	raymath.h	/^RMAPI Vector3 Vector3Reject(Vector3 v1, Vector3 v2)$/;"	f	typeref:typename:RMAPI Vector3
Vector3RotateByAxisAngle	raymath.h	/^RMAPI Vector3 Vector3RotateByAxisAngle(Vector3 v, Vector3 axis, float angle)$/;"	f	typeref:typename:RMAPI Vector3
Vector3RotateByQuaternion	raymath.h	/^RMAPI Vector3 Vector3RotateByQuaternion(Vector3 v, Quaternion q)$/;"	f	typeref:typename:RMAPI Vector3
Vector3Scale	raymath.h	/^RMAPI Vector3 Vector3Scale(Vector3 v, float scalar)$/;"	f	typeref:typename:RMAPI Vector3
Vector3Subtract	raymath.h	/^RMAPI Vector3 Vector3Subtract(Vector3 v1, Vector3 v2)$/;"	f	typeref:typename:RMAPI Vector3
Vector3SubtractValue	raymath.h	/^RMAPI Vector3 Vector3SubtractValue(Vector3 v, float sub)$/;"	f	typeref:typename:RMAPI Vector3
Vector3ToFloat	raymath.h	/^    #define Vector3ToFloat(/;"	d
Vector3ToFloatV	raymath.h	/^RMAPI float3 Vector3ToFloatV(Vector3 v)$/;"	f	typeref:typename:RMAPI float3
Vector3Transform	raymath.h	/^RMAPI Vector3 Vector3Transform(Vector3 v, Matrix mat)$/;"	f	typeref:typename:RMAPI Vector3
Vector3Unproject	raymath.h	/^RMAPI Vector3 Vector3Unproject(Vector3 source, Matrix projection, Matrix view)$/;"	f	typeref:typename:RMAPI Vector3
Vector3Zero	raymath.h	/^RMAPI Vector3 Vector3Zero(void)$/;"	f	typeref:typename:RMAPI Vector3
Vector4	raylib.h	/^typedef struct Vector4 {$/;"	s
Vector4	raylib.h	/^} Vector4;$/;"	t	typeref:struct:Vector4
Vector4	raymath.h	/^typedef struct Vector4 {$/;"	s
Vector4	raymath.h	/^} Vector4;$/;"	t	typeref:struct:Vector4
VrDeviceInfo	raylib.h	/^typedef struct VrDeviceInfo {$/;"	s
VrDeviceInfo	raylib.h	/^} VrDeviceInfo;$/;"	t	typeref:struct:VrDeviceInfo
VrStereoConfig	raylib.h	/^typedef struct VrStereoConfig {$/;"	s
VrStereoConfig	raylib.h	/^} VrStereoConfig;$/;"	t	typeref:struct:VrStereoConfig
WHITE	raylib.h	/^#define WHITE /;"	d
WINGDIAPI	rlgl.h	/^            #define WINGDIAPI /;"	d
Wave	raylib.h	/^typedef struct Wave {$/;"	s
Wave	raylib.h	/^} Wave;$/;"	t	typeref:struct:Wave
Wrap	raymath.h	/^RMAPI float Wrap(float value, float min, float max)$/;"	f	typeref:typename:RMAPI float
YELLOW	raylib.h	/^#define YELLOW /;"	d
__anon19a7bfac0103	rlgl.h	/^typedef enum bool { false = 0, true = !false } bool;$/;"	g
__anon19a7bfac0103	rlgl.h	/^typedef enum bool { false = 0, true = !false } bool;$/;"	t	typeref:enum:bool
__anon19a7bfac0203	rlgl.h	/^typedef enum {$/;"	g
__anon19a7bfac0303	rlgl.h	/^typedef enum {$/;"	g
__anon19a7bfac0403	rlgl.h	/^typedef enum {$/;"	g
__anon19a7bfac0503	rlgl.h	/^typedef enum {$/;"	g
__anon19a7bfac0603	rlgl.h	/^typedef enum {$/;"	g
__anon19a7bfac0703	rlgl.h	/^typedef enum {$/;"	g
__anon19a7bfac0803	rlgl.h	/^typedef enum {$/;"	g
__anon19a7bfac0903	rlgl.h	/^typedef enum {$/;"	g
__anon19a7bfac0a03	rlgl.h	/^typedef enum {$/;"	g
__anon19a7bfac0b03	rlgl.h	/^typedef enum {$/;"	g
__anon19a7bfac0c03	rlgl.h	/^typedef enum {$/;"	g
__anon19a7bfac0d08	rlgl.h	/^    struct {$/;"	s	struct:rlglData
__anon19a7bfac0e08	rlgl.h	/^    struct {$/;"	s	struct:rlglData
__anonfdf2e0de0103	raylib.h	/^    typedef enum bool { false = 0, true = !false } bool;$/;"	g
__anonfdf2e0de0103	raylib.h	/^    typedef enum bool { false = 0, true = !false } bool;$/;"	t	typeref:enum:bool
__anonfdf2e0de0203	raylib.h	/^typedef enum {$/;"	g
__anonfdf2e0de0303	raylib.h	/^typedef enum {$/;"	g
__anonfdf2e0de0403	raylib.h	/^typedef enum {$/;"	g
__anonfdf2e0de0503	raylib.h	/^typedef enum {$/;"	g
__anonfdf2e0de0603	raylib.h	/^typedef enum {$/;"	g
__anonfdf2e0de0703	raylib.h	/^typedef enum {$/;"	g
__anonfdf2e0de0803	raylib.h	/^typedef enum {$/;"	g
__anonfdf2e0de0903	raylib.h	/^typedef enum {$/;"	g
__anonfdf2e0de0a03	raylib.h	/^typedef enum {$/;"	g
__anonfdf2e0de0b03	raylib.h	/^typedef enum {$/;"	g
__anonfdf2e0de0c03	raylib.h	/^typedef enum {$/;"	g
__anonfdf2e0de0d03	raylib.h	/^typedef enum {$/;"	g
__anonfdf2e0de0e03	raylib.h	/^typedef enum {$/;"	g
__anonfdf2e0de0f03	raylib.h	/^typedef enum {$/;"	g
__anonfdf2e0de1003	raylib.h	/^typedef enum {$/;"	g
__anonfdf2e0de1103	raylib.h	/^typedef enum {$/;"	g
__anonfdf2e0de1203	raylib.h	/^typedef enum {$/;"	g
__anonfdf2e0de1303	raylib.h	/^typedef enum {$/;"	g
__anonfdf2e0de1403	raylib.h	/^typedef enum {$/;"	g
__anonfdf2e0de1503	raylib.h	/^typedef enum {$/;"	g
__anonfdf2e0de1603	raylib.h	/^typedef enum {$/;"	g
__declspec	raylib.h	/^            #define __declspec(/;"	d
a	raylib.h	/^    unsigned char a;        \/\/ Color alpha value$/;"	m	struct:Color	typeref:typename:unsigned char
activeTextureId	rlgl.h	/^        unsigned int activeTextureId[RL_DEFAULT_BATCH_MAX_TEXTURE_UNITS];    \/\/ Active texture/;"	m	struct:rlglData::__anon19a7bfac0d08	typeref:typename:unsigned int[]
advanceX	raylib.h	/^    int advanceX;           \/\/ Character advance position X$/;"	m	struct:GlyphInfo	typeref:typename:int
animNormals	raylib.h	/^    float *animNormals;     \/\/ Animated normals (after bones transformations)$/;"	m	struct:Mesh	typeref:typename:float *
animVertices	raylib.h	/^    float *animVertices;    \/\/ Animated vertex positions (after bones transformations)$/;"	m	struct:Mesh	typeref:typename:float *
b	raylib.h	/^    unsigned char b;        \/\/ Color blue value$/;"	m	struct:Color	typeref:typename:unsigned char
baseSize	raylib.h	/^    int baseSize;           \/\/ Base size (default chars height)$/;"	m	struct:Font	typeref:typename:int
bindPose	raylib.h	/^    Transform *bindPose;    \/\/ Bones base transformation (pose)$/;"	m	struct:Model	typeref:typename:Transform *
boneCount	raylib.h	/^    int boneCount;          \/\/ Number of bones$/;"	m	struct:Model	typeref:typename:int
boneCount	raylib.h	/^    int boneCount;          \/\/ Number of bones$/;"	m	struct:ModelAnimation	typeref:typename:int
boneIds	raylib.h	/^    unsigned char *boneIds; \/\/ Vertex bone ids, max 255 bone ids, up to 4 bones influence by v/;"	m	struct:Mesh	typeref:typename:unsigned char *
boneWeights	raylib.h	/^    float *boneWeights;     \/\/ Vertex bone weight, up to 4 bones influence by vertex (skinning/;"	m	struct:Mesh	typeref:typename:float *
bones	raylib.h	/^    BoneInfo *bones;        \/\/ Bones information (skeleton)$/;"	m	struct:Model	typeref:typename:BoneInfo *
bones	raylib.h	/^    BoneInfo *bones;        \/\/ Bones information (skeleton)$/;"	m	struct:ModelAnimation	typeref:typename:BoneInfo *
bottom	raylib.h	/^    int bottom;             \/\/ Bottom border offset$/;"	m	struct:NPatchInfo	typeref:typename:int
buffer	raylib.h	/^    rAudioBuffer *buffer;       \/\/ Pointer to internal data used by the audio system$/;"	m	struct:AudioStream	typeref:typename:rAudioBuffer *
bufferCount	rlgl.h	/^    int bufferCount;            \/\/ Number of vertex buffers (multi-buffering support)$/;"	m	struct:rlRenderBatch	typeref:typename:int
capacity	raylib.h	/^    unsigned int capacity;          \/\/ Events max entries (MAX_AUTOMATION_EVENTS)$/;"	m	struct:AutomationEventList	typeref:typename:unsigned int
capacity	raylib.h	/^    unsigned int capacity;          \/\/ Filepaths max entries$/;"	m	struct:FilePathList	typeref:typename:unsigned int
channels	raylib.h	/^    unsigned int channels;      \/\/ Number of channels (1-mono, 2-stereo, ...)$/;"	m	struct:AudioStream	typeref:typename:unsigned int
channels	raylib.h	/^    unsigned int channels;      \/\/ Number of channels (1-mono, 2-stereo, ...)$/;"	m	struct:Wave	typeref:typename:unsigned int
chromaAbCorrection	raylib.h	/^    float chromaAbCorrection[4];    \/\/ Chromatic aberration correction parameters$/;"	m	struct:VrDeviceInfo	typeref:typename:float[4]
color	raylib.h	/^    Color color;            \/\/ Material map color$/;"	m	struct:MaterialMap	typeref:typename:Color
colora	rlgl.h	/^        unsigned char colorr, colorg, colorb, colora;   \/\/ Current active color (added on glVe/;"	m	struct:rlglData::__anon19a7bfac0d08	typeref:typename:unsigned char
colorb	rlgl.h	/^        unsigned char colorr, colorg, colorb, colora;   \/\/ Current active color (added on glVe/;"	m	struct:rlglData::__anon19a7bfac0d08	typeref:typename:unsigned char
colorg	rlgl.h	/^        unsigned char colorr, colorg, colorb, colora;   \/\/ Current active color (added on glVe/;"	m	struct:rlglData::__anon19a7bfac0d08	typeref:typename:unsigned char
colorr	rlgl.h	/^        unsigned char colorr, colorg, colorb, colora;   \/\/ Current active color (added on glVe/;"	m	struct:rlglData::__anon19a7bfac0d08	typeref:typename:unsigned char
colors	raylib.h	/^    unsigned char *colors;      \/\/ Vertex colors (RGBA - 4 components per vertex) (shader-loca/;"	m	struct:Mesh	typeref:typename:unsigned char *
colors	rlgl.h	/^    unsigned char *colors;      \/\/ Vertex colors (RGBA - 4 components per vertex) (shader-loca/;"	m	struct:rlVertexBuffer	typeref:typename:unsigned char *
computeShader	rlgl.h	/^        bool computeShader;                 \/\/ Compute shaders support (GL_ARB_compute_shader)$/;"	m	struct:rlglData::__anon19a7bfac0e08	typeref:typename:bool
count	raylib.h	/^    unsigned int count;             \/\/ Events entries count$/;"	m	struct:AutomationEventList	typeref:typename:unsigned int
count	raylib.h	/^    unsigned int count;             \/\/ Filepaths entries count$/;"	m	struct:FilePathList	typeref:typename:unsigned int
ctxData	raylib.h	/^    void *ctxData;              \/\/ Audio context data, depends on type$/;"	m	struct:Music	typeref:typename:void *
ctxType	raylib.h	/^    int ctxType;                \/\/ Type of music context (audio filetype)$/;"	m	struct:Music	typeref:typename:int
currentBatch	rlgl.h	/^    rlRenderBatch *currentBatch;            \/\/ Current render batch$/;"	m	struct:rlglData	typeref:typename:rlRenderBatch *
currentBlendMode	rlgl.h	/^        int currentBlendMode;               \/\/ Blending mode active$/;"	m	struct:rlglData::__anon19a7bfac0d08	typeref:typename:int
currentBuffer	rlgl.h	/^    int currentBuffer;          \/\/ Current buffer tracking in case of multi-buffering$/;"	m	struct:rlRenderBatch	typeref:typename:int
currentDepth	rlgl.h	/^    float currentDepth;         \/\/ Current depth value for next draw$/;"	m	struct:rlRenderBatch	typeref:typename:float
currentMatrix	rlgl.h	/^        Matrix *currentMatrix;              \/\/ Current matrix pointer$/;"	m	struct:rlglData::__anon19a7bfac0d08	typeref:typename:Matrix *
currentMatrixMode	rlgl.h	/^        int currentMatrixMode;              \/\/ Current matrix mode$/;"	m	struct:rlglData::__anon19a7bfac0d08	typeref:typename:int
currentShaderId	rlgl.h	/^        unsigned int currentShaderId;       \/\/ Current shader id to be used on rendering (by d/;"	m	struct:rlglData::__anon19a7bfac0d08	typeref:typename:unsigned int
currentShaderLocs	rlgl.h	/^        int *currentShaderLocs;             \/\/ Current shader locations pointer to be used on /;"	m	struct:rlglData::__anon19a7bfac0d08	typeref:typename:int *
data	raylib.h	/^    void *data;                 \/\/ Buffer data pointer$/;"	m	struct:Wave	typeref:typename:void *
data	raylib.h	/^    void *data;             \/\/ Image raw data$/;"	m	struct:Image	typeref:typename:void *
defaultBatch	rlgl.h	/^    rlRenderBatch defaultBatch;             \/\/ Default internal render batch$/;"	m	struct:rlglData	typeref:typename:rlRenderBatch
defaultFShaderId	rlgl.h	/^        unsigned int defaultFShaderId;      \/\/ Default fragment shader id (used by default sha/;"	m	struct:rlglData::__anon19a7bfac0d08	typeref:typename:unsigned int
defaultShaderId	rlgl.h	/^        unsigned int defaultShaderId;       \/\/ Default shader program id, supports vertex colo/;"	m	struct:rlglData::__anon19a7bfac0d08	typeref:typename:unsigned int
defaultShaderLocs	rlgl.h	/^        int *defaultShaderLocs;             \/\/ Default shader locations pointer to be used on /;"	m	struct:rlglData::__anon19a7bfac0d08	typeref:typename:int *
defaultTextureId	rlgl.h	/^        unsigned int defaultTextureId;      \/\/ Default texture used on shapes\/poly drawing (r/;"	m	struct:rlglData::__anon19a7bfac0d08	typeref:typename:unsigned int
defaultVShaderId	rlgl.h	/^        unsigned int defaultVShaderId;      \/\/ Default vertex shader id (used by default shade/;"	m	struct:rlglData::__anon19a7bfac0d08	typeref:typename:unsigned int
depth	raylib.h	/^    Texture depth;          \/\/ Depth buffer attachment texture$/;"	m	struct:RenderTexture	typeref:typename:Texture
direction	raylib.h	/^    Vector3 direction;      \/\/ Ray direction$/;"	m	struct:Ray	typeref:typename:Vector3
distance	raylib.h	/^    float distance;         \/\/ Distance to the nearest hit$/;"	m	struct:RayCollision	typeref:typename:float
drawCounter	rlgl.h	/^    int drawCounter;            \/\/ Draw calls counter$/;"	m	struct:rlRenderBatch	typeref:typename:int
draws	rlgl.h	/^    rlDrawCall *draws;          \/\/ Draw calls array, depends on textureId$/;"	m	struct:rlRenderBatch	typeref:typename:rlDrawCall *
elementCount	rlgl.h	/^    int elementCount;           \/\/ Number of elements in the buffer (QUADS)$/;"	m	struct:rlVertexBuffer	typeref:typename:int
events	raylib.h	/^    AutomationEvent *events;        \/\/ Events entries$/;"	m	struct:AutomationEventList	typeref:typename:AutomationEvent *
eyeToScreenDistance	raylib.h	/^    float eyeToScreenDistance;      \/\/ Distance between eye and display in meters$/;"	m	struct:VrDeviceInfo	typeref:typename:float
float16	raymath.h	/^typedef struct float16 {$/;"	s
float16	raymath.h	/^} float16;$/;"	t	typeref:struct:float16
float3	raymath.h	/^typedef struct float3 {$/;"	s
float3	raymath.h	/^} float3;$/;"	t	typeref:struct:float3
format	raylib.h	/^    int format;             \/\/ Data format (PixelFormat type)$/;"	m	struct:Image	typeref:typename:int
format	raylib.h	/^    int format;             \/\/ Data format (PixelFormat type)$/;"	m	struct:Texture	typeref:typename:int
fovy	raylib.h	/^    float fovy;             \/\/ Camera field-of-view aperture in Y (degrees) in perspective, us/;"	m	struct:Camera3D	typeref:typename:float
frame	raylib.h	/^    unsigned int frame;             \/\/ Event frame$/;"	m	struct:AutomationEvent	typeref:typename:unsigned int
frameCount	raylib.h	/^    int frameCount;         \/\/ Number of animation frames$/;"	m	struct:ModelAnimation	typeref:typename:int
frameCount	raylib.h	/^    unsigned int frameCount;    \/\/ Total number of frames (considering channels)$/;"	m	struct:Music	typeref:typename:unsigned int
frameCount	raylib.h	/^    unsigned int frameCount;    \/\/ Total number of frames (considering channels)$/;"	m	struct:Sound	typeref:typename:unsigned int
frameCount	raylib.h	/^    unsigned int frameCount;    \/\/ Total number of frames (considering channels)$/;"	m	struct:Wave	typeref:typename:unsigned int
framePoses	raylib.h	/^    Transform **framePoses; \/\/ Poses array by frame$/;"	m	struct:ModelAnimation	typeref:typename:Transform **
framebufferHeight	rlgl.h	/^        int framebufferHeight;              \/\/ Current framebuffer height$/;"	m	struct:rlglData::__anon19a7bfac0d08	typeref:typename:int
framebufferWidth	rlgl.h	/^        int framebufferWidth;               \/\/ Current framebuffer width$/;"	m	struct:rlglData::__anon19a7bfac0d08	typeref:typename:int
g	raylib.h	/^    unsigned char g;        \/\/ Color green value$/;"	m	struct:Color	typeref:typename:unsigned char
glBindVertexArray	rlgl.h	/^static PFNGLBINDVERTEXARRAYOESPROC glBindVertexArray = NULL;$/;"	v	typeref:typename:PFNGLBINDVERTEXARRAYOESPROC
glBlendDestFactorAlpha	rlgl.h	/^        int glBlendDestFactorAlpha;         \/\/ Blending destination alpha factor$/;"	m	struct:rlglData::__anon19a7bfac0d08	typeref:typename:int
glBlendDestFactorRGB	rlgl.h	/^        int glBlendDestFactorRGB;           \/\/ Blending destination RGB factor$/;"	m	struct:rlglData::__anon19a7bfac0d08	typeref:typename:int
glBlendDstFactor	rlgl.h	/^        int glBlendDstFactor;               \/\/ Blending destination factor$/;"	m	struct:rlglData::__anon19a7bfac0d08	typeref:typename:int
glBlendEquation	rlgl.h	/^        int glBlendEquation;                \/\/ Blending equation$/;"	m	struct:rlglData::__anon19a7bfac0d08	typeref:typename:int
glBlendEquationAlpha	rlgl.h	/^        int glBlendEquationAlpha;           \/\/ Blending equation for alpha$/;"	m	struct:rlglData::__anon19a7bfac0d08	typeref:typename:int
glBlendEquationRGB	rlgl.h	/^        int glBlendEquationRGB;             \/\/ Blending equation for RGB$/;"	m	struct:rlglData::__anon19a7bfac0d08	typeref:typename:int
glBlendSrcFactor	rlgl.h	/^        int glBlendSrcFactor;               \/\/ Blending source factor$/;"	m	struct:rlglData::__anon19a7bfac0d08	typeref:typename:int
glBlendSrcFactorAlpha	rlgl.h	/^        int glBlendSrcFactorAlpha;          \/\/ Blending source alpha factor$/;"	m	struct:rlglData::__anon19a7bfac0d08	typeref:typename:int
glBlendSrcFactorRGB	rlgl.h	/^        int glBlendSrcFactorRGB;            \/\/ Blending source RGB factor$/;"	m	struct:rlglData::__anon19a7bfac0d08	typeref:typename:int
glClearDepth	rlgl.h	/^    #define glClearDepth /;"	d
glCustomBlendModeModified	rlgl.h	/^        bool glCustomBlendModeModified;     \/\/ Custom blending factor and equation modificatio/;"	m	struct:rlglData::__anon19a7bfac0d08	typeref:typename:bool
glDeleteVertexArrays	rlgl.h	/^static PFNGLDELETEVERTEXARRAYSOESPROC glDeleteVertexArrays = NULL;$/;"	v	typeref:typename:PFNGLDELETEVERTEXARRAYSOESPROC
glDrawArraysInstanced	rlgl.h	/^static PFNGLDRAWARRAYSINSTANCEDEXTPROC glDrawArraysInstanced = NULL;$/;"	v	typeref:typename:PFNGLDRAWARRAYSINSTANCEDEXTPROC
glDrawElementsInstanced	rlgl.h	/^static PFNGLDRAWELEMENTSINSTANCEDEXTPROC glDrawElementsInstanced = NULL;$/;"	v	typeref:typename:PFNGLDRAWELEMENTSINSTANCEDEXTPROC
glGenVertexArrays	rlgl.h	/^static PFNGLGENVERTEXARRAYSOESPROC glGenVertexArrays = NULL;$/;"	v	typeref:typename:PFNGLGENVERTEXARRAYSOESPROC
glVertexAttribDivisor	rlgl.h	/^static PFNGLVERTEXATTRIBDIVISOREXTPROC glVertexAttribDivisor = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBDIVISOREXTPROC
glyphCount	raylib.h	/^    int glyphCount;         \/\/ Number of glyph characters$/;"	m	struct:Font	typeref:typename:int
glyphPadding	raylib.h	/^    int glyphPadding;       \/\/ Padding around the glyph characters$/;"	m	struct:Font	typeref:typename:int
glyphs	raylib.h	/^    GlyphInfo *glyphs;      \/\/ Glyphs info data$/;"	m	struct:Font	typeref:typename:GlyphInfo *
hResolution	raylib.h	/^    int hResolution;                \/\/ Horizontal resolution in pixels$/;"	m	struct:VrDeviceInfo	typeref:typename:int
hScreenSize	raylib.h	/^    float hScreenSize;              \/\/ Horizontal size in meters$/;"	m	struct:VrDeviceInfo	typeref:typename:float
height	raylib.h	/^    float height;           \/\/ Rectangle height$/;"	m	struct:Rectangle	typeref:typename:float
height	raylib.h	/^    int height;             \/\/ Image base height$/;"	m	struct:Image	typeref:typename:int
height	raylib.h	/^    int height;             \/\/ Texture base height$/;"	m	struct:Texture	typeref:typename:int
hit	raylib.h	/^    bool hit;               \/\/ Did the ray hit something?$/;"	m	struct:RayCollision	typeref:typename:bool
id	raylib.h	/^    unsigned int id;        \/\/ OpenGL framebuffer object id$/;"	m	struct:RenderTexture	typeref:typename:unsigned int
id	raylib.h	/^    unsigned int id;        \/\/ OpenGL texture id$/;"	m	struct:Texture	typeref:typename:unsigned int
id	raylib.h	/^    unsigned int id;        \/\/ Shader program id$/;"	m	struct:Shader	typeref:typename:unsigned int
image	raylib.h	/^    Image image;            \/\/ Character image data$/;"	m	struct:GlyphInfo	typeref:typename:Image
indices	raylib.h	/^    unsigned short *indices;    \/\/ Vertex indices (in case vertex data comes indexed)$/;"	m	struct:Mesh	typeref:typename:unsigned short *
indices	rlgl.h	/^    unsigned int *indices;      \/\/ Vertex indices (in case vertex data comes indexed) (6 indic/;"	m	struct:rlVertexBuffer	typeref:typename:unsigned int *
indices	rlgl.h	/^    unsigned short *indices;    \/\/ Vertex indices (in case vertex data comes indexed) (6 indic/;"	m	struct:rlVertexBuffer	typeref:typename:unsigned short *
instancing	rlgl.h	/^        bool instancing;                    \/\/ Instancing supported (GL_ANGLE_instanced_arrays/;"	m	struct:rlglData::__anon19a7bfac0e08	typeref:typename:bool
interpupillaryDistance	raylib.h	/^    float interpupillaryDistance;   \/\/ IPD (distance between pupils) in meters$/;"	m	struct:VrDeviceInfo	typeref:typename:float
layout	raylib.h	/^    int layout;             \/\/ Layout of the n-patch: 3x3, 1x3 or 3x1$/;"	m	struct:NPatchInfo	typeref:typename:int
left	raylib.h	/^    int left;               \/\/ Left border offset$/;"	m	struct:NPatchInfo	typeref:typename:int
leftLensCenter	raylib.h	/^    float leftLensCenter[2];        \/\/ VR left lens center$/;"	m	struct:VrStereoConfig	typeref:typename:float[2]
leftScreenCenter	raylib.h	/^    float leftScreenCenter[2];      \/\/ VR left screen center$/;"	m	struct:VrStereoConfig	typeref:typename:float[2]
lensDistortionValues	raylib.h	/^    float lensDistortionValues[4];  \/\/ Lens distortion constant parameters$/;"	m	struct:VrDeviceInfo	typeref:typename:float[4]
lensSeparationDistance	raylib.h	/^    float lensSeparationDistance;   \/\/ Lens separation distance in meters$/;"	m	struct:VrDeviceInfo	typeref:typename:float
locs	raylib.h	/^    int *locs;              \/\/ Shader locations array (RL_MAX_SHADER_LOCATIONS)$/;"	m	struct:Shader	typeref:typename:int *
looping	raylib.h	/^    bool looping;               \/\/ Music looping enable$/;"	m	struct:Music	typeref:typename:bool
m0	raylib.h	/^    float m0, m4, m8, m12;  \/\/ Matrix first row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m0	raymath.h	/^    float m0, m4, m8, m12;      \/\/ Matrix first row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m0	rlgl.h	/^    float m0, m4, m8, m12;      \/\/ Matrix first row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m1	raylib.h	/^    float m1, m5, m9, m13;  \/\/ Matrix second row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m1	raymath.h	/^    float m1, m5, m9, m13;      \/\/ Matrix second row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m1	rlgl.h	/^    float m1, m5, m9, m13;      \/\/ Matrix second row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m10	raylib.h	/^    float m2, m6, m10, m14; \/\/ Matrix third row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m10	raymath.h	/^    float m2, m6, m10, m14;     \/\/ Matrix third row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m10	rlgl.h	/^    float m2, m6, m10, m14;     \/\/ Matrix third row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m11	raylib.h	/^    float m3, m7, m11, m15; \/\/ Matrix fourth row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m11	raymath.h	/^    float m3, m7, m11, m15;     \/\/ Matrix fourth row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m11	rlgl.h	/^    float m3, m7, m11, m15;     \/\/ Matrix fourth row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m12	raylib.h	/^    float m0, m4, m8, m12;  \/\/ Matrix first row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m12	raymath.h	/^    float m0, m4, m8, m12;      \/\/ Matrix first row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m12	rlgl.h	/^    float m0, m4, m8, m12;      \/\/ Matrix first row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m13	raylib.h	/^    float m1, m5, m9, m13;  \/\/ Matrix second row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m13	raymath.h	/^    float m1, m5, m9, m13;      \/\/ Matrix second row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m13	rlgl.h	/^    float m1, m5, m9, m13;      \/\/ Matrix second row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m14	raylib.h	/^    float m2, m6, m10, m14; \/\/ Matrix third row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m14	raymath.h	/^    float m2, m6, m10, m14;     \/\/ Matrix third row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m14	rlgl.h	/^    float m2, m6, m10, m14;     \/\/ Matrix third row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m15	raylib.h	/^    float m3, m7, m11, m15; \/\/ Matrix fourth row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m15	raymath.h	/^    float m3, m7, m11, m15;     \/\/ Matrix fourth row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m15	rlgl.h	/^    float m3, m7, m11, m15;     \/\/ Matrix fourth row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m2	raylib.h	/^    float m2, m6, m10, m14; \/\/ Matrix third row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m2	raymath.h	/^    float m2, m6, m10, m14;     \/\/ Matrix third row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m2	rlgl.h	/^    float m2, m6, m10, m14;     \/\/ Matrix third row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m3	raylib.h	/^    float m3, m7, m11, m15; \/\/ Matrix fourth row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m3	raymath.h	/^    float m3, m7, m11, m15;     \/\/ Matrix fourth row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m3	rlgl.h	/^    float m3, m7, m11, m15;     \/\/ Matrix fourth row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m4	raylib.h	/^    float m0, m4, m8, m12;  \/\/ Matrix first row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m4	raymath.h	/^    float m0, m4, m8, m12;      \/\/ Matrix first row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m4	rlgl.h	/^    float m0, m4, m8, m12;      \/\/ Matrix first row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m5	raylib.h	/^    float m1, m5, m9, m13;  \/\/ Matrix second row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m5	raymath.h	/^    float m1, m5, m9, m13;      \/\/ Matrix second row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m5	rlgl.h	/^    float m1, m5, m9, m13;      \/\/ Matrix second row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m6	raylib.h	/^    float m2, m6, m10, m14; \/\/ Matrix third row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m6	raymath.h	/^    float m2, m6, m10, m14;     \/\/ Matrix third row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m6	rlgl.h	/^    float m2, m6, m10, m14;     \/\/ Matrix third row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m7	raylib.h	/^    float m3, m7, m11, m15; \/\/ Matrix fourth row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m7	raymath.h	/^    float m3, m7, m11, m15;     \/\/ Matrix fourth row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m7	rlgl.h	/^    float m3, m7, m11, m15;     \/\/ Matrix fourth row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m8	raylib.h	/^    float m0, m4, m8, m12;  \/\/ Matrix first row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m8	raymath.h	/^    float m0, m4, m8, m12;      \/\/ Matrix first row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m8	rlgl.h	/^    float m0, m4, m8, m12;      \/\/ Matrix first row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m9	raylib.h	/^    float m1, m5, m9, m13;  \/\/ Matrix second row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m9	raymath.h	/^    float m1, m5, m9, m13;      \/\/ Matrix second row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m9	rlgl.h	/^    float m1, m5, m9, m13;      \/\/ Matrix second row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
main	main.cpp	/^int main() {$/;"	f	typeref:typename:int
maps	raylib.h	/^    MaterialMap *maps;      \/\/ Material maps array (MAX_MATERIAL_MAPS)$/;"	m	struct:Material	typeref:typename:MaterialMap *
materialCount	raylib.h	/^    int materialCount;      \/\/ Number of materials$/;"	m	struct:Model	typeref:typename:int
materials	raylib.h	/^    Material *materials;    \/\/ Materials array$/;"	m	struct:Model	typeref:typename:Material *
max	raylib.h	/^    Vector3 max;            \/\/ Maximum vertex box-corner$/;"	m	struct:BoundingBox	typeref:typename:Vector3
maxAnisotropyLevel	rlgl.h	/^        float maxAnisotropyLevel;           \/\/ Maximum anisotropy level supported (minimum is /;"	m	struct:rlglData::__anon19a7bfac0e08	typeref:typename:float
maxDepthBits	rlgl.h	/^        int maxDepthBits;                   \/\/ Maximum bits for depth component$/;"	m	struct:rlglData::__anon19a7bfac0e08	typeref:typename:int
meshCount	raylib.h	/^    int meshCount;          \/\/ Number of meshes$/;"	m	struct:Model	typeref:typename:int
meshMaterial	raylib.h	/^    int *meshMaterial;      \/\/ Mesh material number$/;"	m	struct:Model	typeref:typename:int *
meshes	raylib.h	/^    Mesh *meshes;           \/\/ Meshes array$/;"	m	struct:Model	typeref:typename:Mesh *
min	raylib.h	/^    Vector3 min;            \/\/ Minimum vertex box-corner$/;"	m	struct:BoundingBox	typeref:typename:Vector3
mipmaps	raylib.h	/^    int mipmaps;            \/\/ Mipmap levels, 1 by default$/;"	m	struct:Image	typeref:typename:int
mipmaps	raylib.h	/^    int mipmaps;            \/\/ Mipmap levels, 1 by default$/;"	m	struct:Texture	typeref:typename:int
mode	rlgl.h	/^    int mode;                   \/\/ Drawing mode: LINES, TRIANGLES, QUADS$/;"	m	struct:rlDrawCall	typeref:typename:int
modelview	rlgl.h	/^        Matrix modelview;                   \/\/ Default modelview matrix$/;"	m	struct:rlglData::__anon19a7bfac0d08	typeref:typename:Matrix
name	raylib.h	/^    char name[32];          \/\/ Animation name$/;"	m	struct:ModelAnimation	typeref:typename:char[32]
name	raylib.h	/^    char name[32];          \/\/ Bone name$/;"	m	struct:BoneInfo	typeref:typename:char[32]
normal	raylib.h	/^    Vector3 normal;         \/\/ Surface normal of hit$/;"	m	struct:RayCollision	typeref:typename:Vector3
normals	raylib.h	/^    float *normals;         \/\/ Vertex normals (XYZ - 3 components per vertex) (shader-location/;"	m	struct:Mesh	typeref:typename:float *
normalx	rlgl.h	/^        float normalx, normaly, normalz;    \/\/ Current active normal (added on glVertex*())$/;"	m	struct:rlglData::__anon19a7bfac0d08	typeref:typename:float
normaly	rlgl.h	/^        float normalx, normaly, normalz;    \/\/ Current active normal (added on glVertex*())$/;"	m	struct:rlglData::__anon19a7bfac0d08	typeref:typename:float
normalz	rlgl.h	/^        float normalx, normaly, normalz;    \/\/ Current active normal (added on glVertex*())$/;"	m	struct:rlglData::__anon19a7bfac0d08	typeref:typename:float
offset	raylib.h	/^    Vector2 offset;         \/\/ Camera offset (displacement from target)$/;"	m	struct:Camera2D	typeref:typename:Vector2
offsetX	raylib.h	/^    int offsetX;            \/\/ Character offset X when drawing$/;"	m	struct:GlyphInfo	typeref:typename:int
offsetY	raylib.h	/^    int offsetY;            \/\/ Character offset Y when drawing$/;"	m	struct:GlyphInfo	typeref:typename:int
params	raylib.h	/^    float params[4];        \/\/ Material generic parameters (if required)$/;"	m	struct:Material	typeref:typename:float[4]
params	raylib.h	/^    int params[4];                  \/\/ Event parameters (if required)$/;"	m	struct:AutomationEvent	typeref:typename:int[4]
parent	raylib.h	/^    int parent;             \/\/ Bone parent$/;"	m	struct:BoneInfo	typeref:typename:int
paths	raylib.h	/^    char **paths;                   \/\/ Filepaths entries$/;"	m	struct:FilePathList	typeref:typename:char **
point	raylib.h	/^    Vector3 point;          \/\/ Point of the nearest hit$/;"	m	struct:RayCollision	typeref:typename:Vector3
position	raylib.h	/^    Vector3 position;       \/\/ Camera position$/;"	m	struct:Camera3D	typeref:typename:Vector3
position	raylib.h	/^    Vector3 position;       \/\/ Ray position (origin)$/;"	m	struct:Ray	typeref:typename:Vector3
processor	raylib.h	/^    rAudioProcessor *processor; \/\/ Pointer to internal data processor, useful for audio effect/;"	m	struct:AudioStream	typeref:typename:rAudioProcessor *
projection	raylib.h	/^    Matrix projection[2];           \/\/ VR projection matrices (per eye)$/;"	m	struct:VrStereoConfig	typeref:typename:Matrix[2]
projection	raylib.h	/^    int projection;         \/\/ Camera projection: CAMERA_PERSPECTIVE or CAMERA_ORTHOGRAPHIC$/;"	m	struct:Camera3D	typeref:typename:int
projection	rlgl.h	/^        Matrix projection;                  \/\/ Default projection matrix$/;"	m	struct:rlglData::__anon19a7bfac0d08	typeref:typename:Matrix
projectionStereo	rlgl.h	/^        Matrix projectionStereo[2];         \/\/ VR stereo rendering eyes projection matrices$/;"	m	struct:rlglData::__anon19a7bfac0d08	typeref:typename:Matrix[2]
r	raylib.h	/^    unsigned char r;        \/\/ Color red value$/;"	m	struct:Color	typeref:typename:unsigned char
rAudioBuffer	raylib.h	/^typedef struct rAudioBuffer rAudioBuffer;$/;"	t	typeref:struct:rAudioBuffer
rAudioProcessor	raylib.h	/^typedef struct rAudioProcessor rAudioProcessor;$/;"	t	typeref:struct:rAudioProcessor
recs	raylib.h	/^    Rectangle *recs;        \/\/ Rectangles in texture for the glyphs$/;"	m	struct:Font	typeref:typename:Rectangle *
right	raylib.h	/^    int right;              \/\/ Right border offset$/;"	m	struct:NPatchInfo	typeref:typename:int
rightLensCenter	raylib.h	/^    float rightLensCenter[2];       \/\/ VR right lens center$/;"	m	struct:VrStereoConfig	typeref:typename:float[2]
rightScreenCenter	raylib.h	/^    float rightScreenCenter[2];     \/\/ VR right screen center$/;"	m	struct:VrStereoConfig	typeref:typename:float[2]
rlActiveDrawBuffers	rlgl.h	/^void rlActiveDrawBuffers(int count)$/;"	f	typeref:typename:void
rlActiveTextureSlot	rlgl.h	/^void rlActiveTextureSlot(int slot)$/;"	f	typeref:typename:void
rlBegin	rlgl.h	/^void rlBegin(int mode)$/;"	f	typeref:typename:void
rlBindImageTexture	rlgl.h	/^void rlBindImageTexture(unsigned int id, unsigned int index, int format, bool readonly)$/;"	f	typeref:typename:void
rlBindShaderBuffer	rlgl.h	/^void rlBindShaderBuffer(unsigned int id, unsigned int index)$/;"	f	typeref:typename:void
rlBlendMode	rlgl.h	/^} rlBlendMode;$/;"	t	typeref:enum:__anon19a7bfac0603
rlBlitFramebuffer	rlgl.h	/^void rlBlitFramebuffer(int srcX, int srcY, int srcWidth, int srcHeight, int dstX, int dstY, int /;"	f	typeref:typename:void
rlCheckErrors	rlgl.h	/^void rlCheckErrors()$/;"	f	typeref:typename:void
rlCheckRenderBatchLimit	rlgl.h	/^bool rlCheckRenderBatchLimit(int vCount)$/;"	f	typeref:typename:bool
rlClearColor	rlgl.h	/^void rlClearColor(unsigned char r, unsigned char g, unsigned char b, unsigned char a)$/;"	f	typeref:typename:void
rlClearScreenBuffers	rlgl.h	/^void rlClearScreenBuffers(void)$/;"	f	typeref:typename:void
rlColor3f	rlgl.h	/^void rlColor3f(float x, float y, float z) { glColor3f(x, y, z); }$/;"	f	typeref:typename:void
rlColor3f	rlgl.h	/^void rlColor3f(float x, float y, float z)$/;"	f	typeref:typename:void
rlColor4f	rlgl.h	/^void rlColor4f(float r, float g, float b, float a)$/;"	f	typeref:typename:void
rlColor4f	rlgl.h	/^void rlColor4f(float x, float y, float z, float w) { glColor4f(x, y, z, w); }$/;"	f	typeref:typename:void
rlColor4ub	rlgl.h	/^void rlColor4ub(unsigned char r, unsigned char g, unsigned char b, unsigned char a) { glColor4ub/;"	f	typeref:typename:void
rlColor4ub	rlgl.h	/^void rlColor4ub(unsigned char x, unsigned char y, unsigned char z, unsigned char w)$/;"	f	typeref:typename:void
rlCompileShader	rlgl.h	/^unsigned int rlCompileShader(const char *shaderCode, int type)$/;"	f	typeref:typename:unsigned int
rlComputeShaderDispatch	rlgl.h	/^void rlComputeShaderDispatch(unsigned int groupX, unsigned int groupY, unsigned int groupZ)$/;"	f	typeref:typename:void
rlCopyShaderBuffer	rlgl.h	/^void rlCopyShaderBuffer(unsigned int destId, unsigned int srcId, unsigned int destOffset, unsign/;"	f	typeref:typename:void
rlCubemapParameters	rlgl.h	/^void rlCubemapParameters(unsigned int id, int param, int value)$/;"	f	typeref:typename:void
rlCullMode	rlgl.h	/^} rlCullMode;$/;"	t	typeref:enum:__anon19a7bfac0c03
rlDebugMessageCallback	rlgl.h	/^static void GLAPIENTRY rlDebugMessageCallback(GLenum source, GLenum type, GLuint id, GLenum seve/;"	f	typeref:typename:void GLAPIENTRY
rlDisableBackfaceCulling	rlgl.h	/^void rlDisableBackfaceCulling(void) { glDisable(GL_CULL_FACE); }$/;"	f	typeref:typename:void
rlDisableColorBlend	rlgl.h	/^void rlDisableColorBlend(void) { glDisable(GL_BLEND); }$/;"	f	typeref:typename:void
rlDisableDepthMask	rlgl.h	/^void rlDisableDepthMask(void) { glDepthMask(GL_FALSE); }$/;"	f	typeref:typename:void
rlDisableDepthTest	rlgl.h	/^void rlDisableDepthTest(void) { glDisable(GL_DEPTH_TEST); }$/;"	f	typeref:typename:void
rlDisableFramebuffer	rlgl.h	/^void rlDisableFramebuffer(void)$/;"	f	typeref:typename:void
rlDisableScissorTest	rlgl.h	/^void rlDisableScissorTest(void) { glDisable(GL_SCISSOR_TEST); }$/;"	f	typeref:typename:void
rlDisableShader	rlgl.h	/^void rlDisableShader(void)$/;"	f	typeref:typename:void
rlDisableSmoothLines	rlgl.h	/^void rlDisableSmoothLines(void)$/;"	f	typeref:typename:void
rlDisableStatePointer	rlgl.h	/^void rlDisableStatePointer(int vertexAttribType)$/;"	f	typeref:typename:void
rlDisableStereoRender	rlgl.h	/^void rlDisableStereoRender(void)$/;"	f	typeref:typename:void
rlDisableTexture	rlgl.h	/^void rlDisableTexture(void)$/;"	f	typeref:typename:void
rlDisableTextureCubemap	rlgl.h	/^void rlDisableTextureCubemap(void)$/;"	f	typeref:typename:void
rlDisableVertexArray	rlgl.h	/^void rlDisableVertexArray(void)$/;"	f	typeref:typename:void
rlDisableVertexAttribute	rlgl.h	/^void rlDisableVertexAttribute(unsigned int index)$/;"	f	typeref:typename:void
rlDisableVertexBuffer	rlgl.h	/^void rlDisableVertexBuffer(void)$/;"	f	typeref:typename:void
rlDisableVertexBufferElement	rlgl.h	/^void rlDisableVertexBufferElement(void)$/;"	f	typeref:typename:void
rlDisableWireMode	rlgl.h	/^void rlDisableWireMode(void)$/;"	f	typeref:typename:void
rlDrawCall	rlgl.h	/^typedef struct rlDrawCall {$/;"	s
rlDrawCall	rlgl.h	/^} rlDrawCall;$/;"	t	typeref:struct:rlDrawCall
rlDrawRenderBatch	rlgl.h	/^void rlDrawRenderBatch(rlRenderBatch *batch)$/;"	f	typeref:typename:void
rlDrawRenderBatchActive	rlgl.h	/^void rlDrawRenderBatchActive(void)$/;"	f	typeref:typename:void
rlDrawVertexArray	rlgl.h	/^void rlDrawVertexArray(int offset, int count)$/;"	f	typeref:typename:void
rlDrawVertexArrayElements	rlgl.h	/^void rlDrawVertexArrayElements(int offset, int count, const void *buffer)$/;"	f	typeref:typename:void
rlDrawVertexArrayElementsInstanced	rlgl.h	/^void rlDrawVertexArrayElementsInstanced(int offset, int count, const void *buffer, int instances/;"	f	typeref:typename:void
rlDrawVertexArrayInstanced	rlgl.h	/^void rlDrawVertexArrayInstanced(int offset, int count, int instances)$/;"	f	typeref:typename:void
rlEnableBackfaceCulling	rlgl.h	/^void rlEnableBackfaceCulling(void) { glEnable(GL_CULL_FACE); }$/;"	f	typeref:typename:void
rlEnableColorBlend	rlgl.h	/^void rlEnableColorBlend(void) { glEnable(GL_BLEND); }$/;"	f	typeref:typename:void
rlEnableDepthMask	rlgl.h	/^void rlEnableDepthMask(void) { glDepthMask(GL_TRUE); }$/;"	f	typeref:typename:void
rlEnableDepthTest	rlgl.h	/^void rlEnableDepthTest(void) { glEnable(GL_DEPTH_TEST); }$/;"	f	typeref:typename:void
rlEnableFramebuffer	rlgl.h	/^void rlEnableFramebuffer(unsigned int id)$/;"	f	typeref:typename:void
rlEnablePointMode	rlgl.h	/^void rlEnablePointMode(void)$/;"	f	typeref:typename:void
rlEnableScissorTest	rlgl.h	/^void rlEnableScissorTest(void) { glEnable(GL_SCISSOR_TEST); }$/;"	f	typeref:typename:void
rlEnableShader	rlgl.h	/^void rlEnableShader(unsigned int id)$/;"	f	typeref:typename:void
rlEnableSmoothLines	rlgl.h	/^void rlEnableSmoothLines(void)$/;"	f	typeref:typename:void
rlEnableStatePointer	rlgl.h	/^void rlEnableStatePointer(int vertexAttribType, void *buffer)$/;"	f	typeref:typename:void
rlEnableStereoRender	rlgl.h	/^void rlEnableStereoRender(void)$/;"	f	typeref:typename:void
rlEnableTexture	rlgl.h	/^void rlEnableTexture(unsigned int id)$/;"	f	typeref:typename:void
rlEnableTextureCubemap	rlgl.h	/^void rlEnableTextureCubemap(unsigned int id)$/;"	f	typeref:typename:void
rlEnableVertexArray	rlgl.h	/^bool rlEnableVertexArray(unsigned int vaoId)$/;"	f	typeref:typename:bool
rlEnableVertexAttribute	rlgl.h	/^void rlEnableVertexAttribute(unsigned int index)$/;"	f	typeref:typename:void
rlEnableVertexBuffer	rlgl.h	/^void rlEnableVertexBuffer(unsigned int id)$/;"	f	typeref:typename:void
rlEnableVertexBufferElement	rlgl.h	/^void rlEnableVertexBufferElement(unsigned int id)$/;"	f	typeref:typename:void
rlEnableWireMode	rlgl.h	/^void rlEnableWireMode(void)$/;"	f	typeref:typename:void
rlEnd	rlgl.h	/^void rlEnd() { glEnd(); }$/;"	f	typeref:typename:void
rlEnd	rlgl.h	/^void rlEnd(void)$/;"	f	typeref:typename:void
rlFramebufferAttach	rlgl.h	/^void rlFramebufferAttach(unsigned int fboId, unsigned int texId, int attachType, int texType, in/;"	f	typeref:typename:void
rlFramebufferAttachTextureType	rlgl.h	/^} rlFramebufferAttachTextureType;$/;"	t	typeref:enum:__anon19a7bfac0b03
rlFramebufferAttachType	rlgl.h	/^} rlFramebufferAttachType;$/;"	t	typeref:enum:__anon19a7bfac0a03
rlFramebufferComplete	rlgl.h	/^bool rlFramebufferComplete(unsigned int id)$/;"	f	typeref:typename:bool
rlFrustum	rlgl.h	/^void rlFrustum(double left, double right, double bottom, double top, double znear, double zfar)$/;"	f	typeref:typename:void
rlGenTextureMipmaps	rlgl.h	/^void rlGenTextureMipmaps(unsigned int id, int width, int height, int format, int *mipmaps)$/;"	f	typeref:typename:void
rlGetCompressedFormatName	rlgl.h	/^static const char *rlGetCompressedFormatName(int format)$/;"	f	typeref:typename:const char *
rlGetFramebufferHeight	rlgl.h	/^int rlGetFramebufferHeight(void)$/;"	f	typeref:typename:int
rlGetFramebufferWidth	rlgl.h	/^int rlGetFramebufferWidth(void)$/;"	f	typeref:typename:int
rlGetGlTextureFormats	rlgl.h	/^void rlGetGlTextureFormats(int format, unsigned int *glInternalFormat, unsigned int *glFormat, u/;"	f	typeref:typename:void
rlGetLineWidth	rlgl.h	/^float rlGetLineWidth(void)$/;"	f	typeref:typename:float
rlGetLocationAttrib	rlgl.h	/^int rlGetLocationAttrib(unsigned int shaderId, const char *attribName)$/;"	f	typeref:typename:int
rlGetLocationUniform	rlgl.h	/^int rlGetLocationUniform(unsigned int shaderId, const char *uniformName)$/;"	f	typeref:typename:int
rlGetMatrixModelview	rlgl.h	/^Matrix rlGetMatrixModelview(void)$/;"	f	typeref:typename:Matrix
rlGetMatrixProjection	rlgl.h	/^Matrix rlGetMatrixProjection(void)$/;"	f	typeref:typename:Matrix
rlGetMatrixProjectionStereo	rlgl.h	/^RLAPI Matrix rlGetMatrixProjectionStereo(int eye)$/;"	f	typeref:typename:RLAPI Matrix
rlGetMatrixTransform	rlgl.h	/^Matrix rlGetMatrixTransform(void)$/;"	f	typeref:typename:Matrix
rlGetMatrixViewOffsetStereo	rlgl.h	/^RLAPI Matrix rlGetMatrixViewOffsetStereo(int eye)$/;"	f	typeref:typename:RLAPI Matrix
rlGetPixelDataSize	rlgl.h	/^static int rlGetPixelDataSize(int width, int height, int format)$/;"	f	typeref:typename:int
rlGetPixelFormatName	rlgl.h	/^const char *rlGetPixelFormatName(unsigned int format)$/;"	f	typeref:typename:const char *
rlGetShaderBufferSize	rlgl.h	/^unsigned int rlGetShaderBufferSize(unsigned int id)$/;"	f	typeref:typename:unsigned int
rlGetShaderIdDefault	rlgl.h	/^unsigned int rlGetShaderIdDefault(void)$/;"	f	typeref:typename:unsigned int
rlGetShaderLocsDefault	rlgl.h	/^int *rlGetShaderLocsDefault(void)$/;"	f	typeref:typename:int *
rlGetTextureIdDefault	rlgl.h	/^unsigned int rlGetTextureIdDefault(void)$/;"	f	typeref:typename:unsigned int
rlGetVersion	rlgl.h	/^int rlGetVersion(void)$/;"	f	typeref:typename:int
rlGlVersion	rlgl.h	/^} rlGlVersion;$/;"	t	typeref:enum:__anon19a7bfac0203
rlIsStereoRenderEnabled	rlgl.h	/^bool rlIsStereoRenderEnabled(void)$/;"	f	typeref:typename:bool
rlLoadComputeShaderProgram	rlgl.h	/^unsigned int rlLoadComputeShaderProgram(unsigned int shaderId)$/;"	f	typeref:typename:unsigned int
rlLoadDrawCube	rlgl.h	/^void rlLoadDrawCube(void)$/;"	f	typeref:typename:void
rlLoadDrawQuad	rlgl.h	/^void rlLoadDrawQuad(void)$/;"	f	typeref:typename:void
rlLoadExtensions	rlgl.h	/^void rlLoadExtensions(void *loader)$/;"	f	typeref:typename:void
rlLoadFramebuffer	rlgl.h	/^unsigned int rlLoadFramebuffer(int width, int height)$/;"	f	typeref:typename:unsigned int
rlLoadIdentity	rlgl.h	/^void rlLoadIdentity(void) { glLoadIdentity(); }$/;"	f	typeref:typename:void
rlLoadIdentity	rlgl.h	/^void rlLoadIdentity(void)$/;"	f	typeref:typename:void
rlLoadRenderBatch	rlgl.h	/^rlRenderBatch rlLoadRenderBatch(int numBuffers, int bufferElements)$/;"	f	typeref:typename:rlRenderBatch
rlLoadShaderBuffer	rlgl.h	/^unsigned int rlLoadShaderBuffer(unsigned int size, const void *data, int usageHint)$/;"	f	typeref:typename:unsigned int
rlLoadShaderCode	rlgl.h	/^unsigned int rlLoadShaderCode(const char *vsCode, const char *fsCode)$/;"	f	typeref:typename:unsigned int
rlLoadShaderDefault	rlgl.h	/^static void rlLoadShaderDefault(void)$/;"	f	typeref:typename:void
rlLoadShaderProgram	rlgl.h	/^unsigned int rlLoadShaderProgram(unsigned int vShaderId, unsigned int fShaderId)$/;"	f	typeref:typename:unsigned int
rlLoadTexture	rlgl.h	/^unsigned int rlLoadTexture(const void *data, int width, int height, int format, int mipmapCount)$/;"	f	typeref:typename:unsigned int
rlLoadTextureCubemap	rlgl.h	/^unsigned int rlLoadTextureCubemap(const void *data, int size, int format)$/;"	f	typeref:typename:unsigned int
rlLoadTextureDepth	rlgl.h	/^unsigned int rlLoadTextureDepth(int width, int height, bool useRenderBuffer)$/;"	f	typeref:typename:unsigned int
rlLoadVertexArray	rlgl.h	/^unsigned int rlLoadVertexArray(void)$/;"	f	typeref:typename:unsigned int
rlLoadVertexBuffer	rlgl.h	/^unsigned int rlLoadVertexBuffer(const void *buffer, int size, bool dynamic)$/;"	f	typeref:typename:unsigned int
rlLoadVertexBufferElement	rlgl.h	/^unsigned int rlLoadVertexBufferElement(const void *buffer, int size, bool dynamic)$/;"	f	typeref:typename:unsigned int
rlMatrixIdentity	rlgl.h	/^static Matrix rlMatrixIdentity(void)$/;"	f	typeref:typename:Matrix
rlMatrixMode	rlgl.h	/^void rlMatrixMode(int mode)$/;"	f	typeref:typename:void
rlMatrixMultiply	rlgl.h	/^static Matrix rlMatrixMultiply(Matrix left, Matrix right)$/;"	f	typeref:typename:Matrix
rlMultMatrixf	rlgl.h	/^void rlMultMatrixf(const float *matf) { glMultMatrixf(matf); }$/;"	f	typeref:typename:void
rlMultMatrixf	rlgl.h	/^void rlMultMatrixf(const float *matf)$/;"	f	typeref:typename:void
rlNormal3f	rlgl.h	/^void rlNormal3f(float x, float y, float z) { glNormal3f(x, y, z); }$/;"	f	typeref:typename:void
rlNormal3f	rlgl.h	/^void rlNormal3f(float x, float y, float z)$/;"	f	typeref:typename:void
rlOrtho	rlgl.h	/^void rlOrtho(double left, double right, double bottom, double top, double znear, double zfar)$/;"	f	typeref:typename:void
rlPixelFormat	rlgl.h	/^} rlPixelFormat;$/;"	t	typeref:enum:__anon19a7bfac0403
rlPopMatrix	rlgl.h	/^void rlPopMatrix(void) { glPopMatrix(); }$/;"	f	typeref:typename:void
rlPopMatrix	rlgl.h	/^void rlPopMatrix(void)$/;"	f	typeref:typename:void
rlPushMatrix	rlgl.h	/^void rlPushMatrix(void) { glPushMatrix(); }$/;"	f	typeref:typename:void
rlPushMatrix	rlgl.h	/^void rlPushMatrix(void)$/;"	f	typeref:typename:void
rlReadScreenPixels	rlgl.h	/^unsigned char *rlReadScreenPixels(int width, int height)$/;"	f	typeref:typename:unsigned char *
rlReadShaderBuffer	rlgl.h	/^void rlReadShaderBuffer(unsigned int id, void *dest, unsigned int count, unsigned int offset)$/;"	f	typeref:typename:void
rlReadTexturePixels	rlgl.h	/^void *rlReadTexturePixels(unsigned int id, int width, int height, int format)$/;"	f	typeref:typename:void *
rlRenderBatch	rlgl.h	/^typedef struct rlRenderBatch {$/;"	s
rlRenderBatch	rlgl.h	/^} rlRenderBatch;$/;"	t	typeref:struct:rlRenderBatch
rlRotatef	rlgl.h	/^void rlRotatef(float angle, float x, float y, float z) { glRotatef(angle, x, y, z); }$/;"	f	typeref:typename:void
rlRotatef	rlgl.h	/^void rlRotatef(float angle, float x, float y, float z)$/;"	f	typeref:typename:void
rlScalef	rlgl.h	/^void rlScalef(float x, float y, float z) { glScalef(x, y, z); }$/;"	f	typeref:typename:void
rlScalef	rlgl.h	/^void rlScalef(float x, float y, float z)$/;"	f	typeref:typename:void
rlScissor	rlgl.h	/^void rlScissor(int x, int y, int width, int height) { glScissor(x, y, width, height); }$/;"	f	typeref:typename:void
rlSetBlendFactors	rlgl.h	/^void rlSetBlendFactors(int glSrcFactor, int glDstFactor, int glEquation)$/;"	f	typeref:typename:void
rlSetBlendFactorsSeparate	rlgl.h	/^void rlSetBlendFactorsSeparate(int glSrcRGB, int glDstRGB, int glSrcAlpha, int glDstAlpha, int g/;"	f	typeref:typename:void
rlSetBlendMode	rlgl.h	/^void rlSetBlendMode(int mode)$/;"	f	typeref:typename:void
rlSetCullFace	rlgl.h	/^void rlSetCullFace(int mode)$/;"	f	typeref:typename:void
rlSetFramebufferHeight	rlgl.h	/^void rlSetFramebufferHeight(int height)$/;"	f	typeref:typename:void
rlSetFramebufferWidth	rlgl.h	/^void rlSetFramebufferWidth(int width)$/;"	f	typeref:typename:void
rlSetLineWidth	rlgl.h	/^void rlSetLineWidth(float width) { glLineWidth(width); }$/;"	f	typeref:typename:void
rlSetMatrixModelview	rlgl.h	/^void rlSetMatrixModelview(Matrix view)$/;"	f	typeref:typename:void
rlSetMatrixProjection	rlgl.h	/^void rlSetMatrixProjection(Matrix projection)$/;"	f	typeref:typename:void
rlSetMatrixProjectionStereo	rlgl.h	/^void rlSetMatrixProjectionStereo(Matrix right, Matrix left)$/;"	f	typeref:typename:void
rlSetMatrixViewOffsetStereo	rlgl.h	/^void rlSetMatrixViewOffsetStereo(Matrix right, Matrix left)$/;"	f	typeref:typename:void
rlSetRenderBatchActive	rlgl.h	/^void rlSetRenderBatchActive(rlRenderBatch *batch)$/;"	f	typeref:typename:void
rlSetShader	rlgl.h	/^void rlSetShader(unsigned int id, int *locs)$/;"	f	typeref:typename:void
rlSetTexture	rlgl.h	/^void rlSetTexture(unsigned int id)$/;"	f	typeref:typename:void
rlSetUniform	rlgl.h	/^void rlSetUniform(int locIndex, const void *value, int uniformType, int count)$/;"	f	typeref:typename:void
rlSetUniformMatrix	rlgl.h	/^void rlSetUniformMatrix(int locIndex, Matrix mat)$/;"	f	typeref:typename:void
rlSetUniformSampler	rlgl.h	/^void rlSetUniformSampler(int locIndex, unsigned int textureId)$/;"	f	typeref:typename:void
rlSetVertexAttribute	rlgl.h	/^void rlSetVertexAttribute(unsigned int index, int compSize, int type, bool normalized, int strid/;"	f	typeref:typename:void
rlSetVertexAttributeDefault	rlgl.h	/^void rlSetVertexAttributeDefault(int locIndex, const void *value, int attribType, int count)$/;"	f	typeref:typename:void
rlSetVertexAttributeDivisor	rlgl.h	/^void rlSetVertexAttributeDivisor(unsigned int index, int divisor)$/;"	f	typeref:typename:void
rlShaderAttributeDataType	rlgl.h	/^} rlShaderAttributeDataType;$/;"	t	typeref:enum:__anon19a7bfac0903
rlShaderLocationIndex	rlgl.h	/^} rlShaderLocationIndex;$/;"	t	typeref:enum:__anon19a7bfac0703
rlShaderUniformDataType	rlgl.h	/^} rlShaderUniformDataType;$/;"	t	typeref:enum:__anon19a7bfac0803
rlTexCoord2f	rlgl.h	/^void rlTexCoord2f(float x, float y) { glTexCoord2f(x, y); }$/;"	f	typeref:typename:void
rlTexCoord2f	rlgl.h	/^void rlTexCoord2f(float x, float y)$/;"	f	typeref:typename:void
rlTextureFilter	rlgl.h	/^} rlTextureFilter;$/;"	t	typeref:enum:__anon19a7bfac0503
rlTextureParameters	rlgl.h	/^void rlTextureParameters(unsigned int id, int param, int value)$/;"	f	typeref:typename:void
rlTraceLogLevel	rlgl.h	/^} rlTraceLogLevel;$/;"	t	typeref:enum:__anon19a7bfac0303
rlTranslatef	rlgl.h	/^void rlTranslatef(float x, float y, float z) { glTranslatef(x, y, z); }$/;"	f	typeref:typename:void
rlTranslatef	rlgl.h	/^void rlTranslatef(float x, float y, float z)$/;"	f	typeref:typename:void
rlUnloadFramebuffer	rlgl.h	/^void rlUnloadFramebuffer(unsigned int id)$/;"	f	typeref:typename:void
rlUnloadRenderBatch	rlgl.h	/^void rlUnloadRenderBatch(rlRenderBatch batch)$/;"	f	typeref:typename:void
rlUnloadShaderBuffer	rlgl.h	/^void rlUnloadShaderBuffer(unsigned int ssboId)$/;"	f	typeref:typename:void
rlUnloadShaderDefault	rlgl.h	/^static void rlUnloadShaderDefault(void)$/;"	f	typeref:typename:void
rlUnloadShaderProgram	rlgl.h	/^void rlUnloadShaderProgram(unsigned int id)$/;"	f	typeref:typename:void
rlUnloadTexture	rlgl.h	/^void rlUnloadTexture(unsigned int id)$/;"	f	typeref:typename:void
rlUnloadVertexArray	rlgl.h	/^void rlUnloadVertexArray(unsigned int vaoId)$/;"	f	typeref:typename:void
rlUnloadVertexBuffer	rlgl.h	/^void rlUnloadVertexBuffer(unsigned int vboId)$/;"	f	typeref:typename:void
rlUpdateShaderBuffer	rlgl.h	/^void rlUpdateShaderBuffer(unsigned int id, const void *data, unsigned int dataSize, unsigned int/;"	f	typeref:typename:void
rlUpdateTexture	rlgl.h	/^void rlUpdateTexture(unsigned int id, int offsetX, int offsetY, int width, int height, int forma/;"	f	typeref:typename:void
rlUpdateVertexBuffer	rlgl.h	/^void rlUpdateVertexBuffer(unsigned int id, const void *data, int dataSize, int offset)$/;"	f	typeref:typename:void
rlUpdateVertexBufferElements	rlgl.h	/^void rlUpdateVertexBufferElements(unsigned int id, const void *data, int dataSize, int offset)$/;"	f	typeref:typename:void
rlVertex2f	rlgl.h	/^void rlVertex2f(float x, float y) { glVertex2f(x, y); }$/;"	f	typeref:typename:void
rlVertex2f	rlgl.h	/^void rlVertex2f(float x, float y)$/;"	f	typeref:typename:void
rlVertex2i	rlgl.h	/^void rlVertex2i(int x, int y) { glVertex2i(x, y); }$/;"	f	typeref:typename:void
rlVertex2i	rlgl.h	/^void rlVertex2i(int x, int y)$/;"	f	typeref:typename:void
rlVertex3f	rlgl.h	/^void rlVertex3f(float x, float y, float z) { glVertex3f(x, y, z); }$/;"	f	typeref:typename:void
rlVertex3f	rlgl.h	/^void rlVertex3f(float x, float y, float z)$/;"	f	typeref:typename:void
rlVertexBuffer	rlgl.h	/^typedef struct rlVertexBuffer {$/;"	s
rlVertexBuffer	rlgl.h	/^} rlVertexBuffer;$/;"	t	typeref:struct:rlVertexBuffer
rlViewport	rlgl.h	/^void rlViewport(int x, int y, int width, int height)$/;"	f	typeref:typename:void
rlglClose	rlgl.h	/^void rlglClose(void)$/;"	f	typeref:typename:void
rlglData	rlgl.h	/^typedef struct rlglData {$/;"	s
rlglData	rlgl.h	/^} rlglData;$/;"	t	typeref:struct:rlglData
rlglInit	rlgl.h	/^void rlglInit(int width, int height)$/;"	f	typeref:typename:void
rlglLoadProc	rlgl.h	/^typedef void *(*rlglLoadProc)(const char *name);   \/\/ OpenGL extension functions loader signat/;"	t	typeref:typename:void * (*)(const char * name)
rotation	raylib.h	/^    Quaternion rotation;    \/\/ Rotation$/;"	m	struct:Transform	typeref:typename:Quaternion
rotation	raylib.h	/^    float rotation;         \/\/ Camera rotation in degrees$/;"	m	struct:Camera2D	typeref:typename:float
sampleRate	raylib.h	/^    unsigned int sampleRate;    \/\/ Frequency (samples per second)$/;"	m	struct:AudioStream	typeref:typename:unsigned int
sampleRate	raylib.h	/^    unsigned int sampleRate;    \/\/ Frequency (samples per second)$/;"	m	struct:Wave	typeref:typename:unsigned int
sampleSize	raylib.h	/^    unsigned int sampleSize;    \/\/ Bit depth (bits per sample): 8, 16, 32 (24 not supported)$/;"	m	struct:AudioStream	typeref:typename:unsigned int
sampleSize	raylib.h	/^    unsigned int sampleSize;    \/\/ Bit depth (bits per sample): 8, 16, 32 (24 not supported)$/;"	m	struct:Wave	typeref:typename:unsigned int
scale	raylib.h	/^    Vector3 scale;          \/\/ Scale$/;"	m	struct:Transform	typeref:typename:Vector3
scale	raylib.h	/^    float scale[2];                 \/\/ VR distortion scale$/;"	m	struct:VrStereoConfig	typeref:typename:float[2]
scaleIn	raylib.h	/^    float scaleIn[2];               \/\/ VR distortion scale in$/;"	m	struct:VrStereoConfig	typeref:typename:float[2]
shader	raylib.h	/^    Shader shader;          \/\/ Material shader$/;"	m	struct:Material	typeref:typename:Shader
source	raylib.h	/^    Rectangle source;       \/\/ Texture source rectangle$/;"	m	struct:NPatchInfo	typeref:typename:Rectangle
ssbo	rlgl.h	/^        bool ssbo;                          \/\/ Shader storage buffer object support (GL_ARB_sh/;"	m	struct:rlglData::__anon19a7bfac0e08	typeref:typename:bool
stack	rlgl.h	/^        Matrix stack[RL_MAX_MATRIX_STACK_SIZE];\/\/ Matrix stack for push\/pop$/;"	m	struct:rlglData::__anon19a7bfac0d08	typeref:typename:Matrix[]
stackCounter	rlgl.h	/^        int stackCounter;                   \/\/ Matrix stack counter$/;"	m	struct:rlglData::__anon19a7bfac0d08	typeref:typename:int
stereoRender	rlgl.h	/^        bool stereoRender;                  \/\/ Stereo rendering flag$/;"	m	struct:rlglData::__anon19a7bfac0d08	typeref:typename:bool
stream	raylib.h	/^    AudioStream stream;         \/\/ Audio stream$/;"	m	struct:Music	typeref:typename:AudioStream
stream	raylib.h	/^    AudioStream stream;         \/\/ Audio stream$/;"	m	struct:Sound	typeref:typename:AudioStream
tangents	raylib.h	/^    float *tangents;        \/\/ Vertex tangents (XYZW - 4 components per vertex) (shader-locati/;"	m	struct:Mesh	typeref:typename:float *
target	raylib.h	/^    Vector2 target;         \/\/ Camera target (rotation and zoom origin)$/;"	m	struct:Camera2D	typeref:typename:Vector2
target	raylib.h	/^    Vector3 target;         \/\/ Camera target it looks-at$/;"	m	struct:Camera3D	typeref:typename:Vector3
texAnisoFilter	rlgl.h	/^        bool texAnisoFilter;                \/\/ Anisotropic texture filtering support (GL_EXT_t/;"	m	struct:rlglData::__anon19a7bfac0e08	typeref:typename:bool
texCompASTC	rlgl.h	/^        bool texCompASTC;                   \/\/ ASTC texture compression support (GL_KHR_textur/;"	m	struct:rlglData::__anon19a7bfac0e08	typeref:typename:bool
texCompDXT	rlgl.h	/^        bool texCompDXT;                    \/\/ DDS texture compression support (GL_EXT_texture/;"	m	struct:rlglData::__anon19a7bfac0e08	typeref:typename:bool
texCompETC1	rlgl.h	/^        bool texCompETC1;                   \/\/ ETC1 texture compression support (GL_OES_compre/;"	m	struct:rlglData::__anon19a7bfac0e08	typeref:typename:bool
texCompETC2	rlgl.h	/^        bool texCompETC2;                   \/\/ ETC2\/EAC texture compression support (GL_ARB_E/;"	m	struct:rlglData::__anon19a7bfac0e08	typeref:typename:bool
texCompPVRT	rlgl.h	/^        bool texCompPVRT;                   \/\/ PVR texture compression support (GL_IMG_texture/;"	m	struct:rlglData::__anon19a7bfac0e08	typeref:typename:bool
texDepth	rlgl.h	/^        bool texDepth;                      \/\/ Depth textures supported (GL_ARB_depth_texture,/;"	m	struct:rlglData::__anon19a7bfac0e08	typeref:typename:bool
texDepthWebGL	rlgl.h	/^        bool texDepthWebGL;                 \/\/ Depth textures supported WebGL specific (GL_WEB/;"	m	struct:rlglData::__anon19a7bfac0e08	typeref:typename:bool
texFloat16	rlgl.h	/^        bool texFloat16;                    \/\/ half float textures support (16 bit per channel/;"	m	struct:rlglData::__anon19a7bfac0e08	typeref:typename:bool
texFloat32	rlgl.h	/^        bool texFloat32;                    \/\/ float textures support (32 bit per channel) (GL/;"	m	struct:rlglData::__anon19a7bfac0e08	typeref:typename:bool
texMirrorClamp	rlgl.h	/^        bool texMirrorClamp;                \/\/ Clamp mirror wrap mode supported (GL_EXT_textur/;"	m	struct:rlglData::__anon19a7bfac0e08	typeref:typename:bool
texNPOT	rlgl.h	/^        bool texNPOT;                       \/\/ NPOT textures full support (GL_ARB_texture_non_/;"	m	struct:rlglData::__anon19a7bfac0e08	typeref:typename:bool
texcoords	raylib.h	/^    float *texcoords;       \/\/ Vertex texture coordinates (UV - 2 components per vertex) (shad/;"	m	struct:Mesh	typeref:typename:float *
texcoords	rlgl.h	/^    float *texcoords;           \/\/ Vertex texture coordinates (UV - 2 components per vertex) (/;"	m	struct:rlVertexBuffer	typeref:typename:float *
texcoords2	raylib.h	/^    float *texcoords2;      \/\/ Vertex texture second coordinates (UV - 2 components per vertex/;"	m	struct:Mesh	typeref:typename:float *
texcoordx	rlgl.h	/^        float texcoordx, texcoordy;         \/\/ Current active texture coordinate (added on glV/;"	m	struct:rlglData::__anon19a7bfac0d08	typeref:typename:float
texcoordy	rlgl.h	/^        float texcoordx, texcoordy;         \/\/ Current active texture coordinate (added on glV/;"	m	struct:rlglData::__anon19a7bfac0d08	typeref:typename:float
texture	raylib.h	/^    Texture texture;        \/\/ Color buffer attachment texture$/;"	m	struct:RenderTexture	typeref:typename:Texture
texture	raylib.h	/^    Texture2D texture;      \/\/ Material map texture$/;"	m	struct:MaterialMap	typeref:typename:Texture2D
texture	raylib.h	/^    Texture2D texture;      \/\/ Texture atlas containing the glyphs$/;"	m	struct:Font	typeref:typename:Texture2D
textureId	rlgl.h	/^    unsigned int textureId;     \/\/ Texture id to be used on the draw -> Use to create new draw/;"	m	struct:rlDrawCall	typeref:typename:unsigned int
top	raylib.h	/^    int top;                \/\/ Top border offset$/;"	m	struct:NPatchInfo	typeref:typename:int
transform	raylib.h	/^    Matrix transform;       \/\/ Local transform matrix$/;"	m	struct:Model	typeref:typename:Matrix
transform	rlgl.h	/^        Matrix transform;                   \/\/ Transform matrix to be used with rlTranslate, r/;"	m	struct:rlglData::__anon19a7bfac0d08	typeref:typename:Matrix
transformRequired	rlgl.h	/^        bool transformRequired;             \/\/ Require transform matrix application to current/;"	m	struct:rlglData::__anon19a7bfac0d08	typeref:typename:bool
translation	raylib.h	/^    Vector3 translation;    \/\/ Translation$/;"	m	struct:Transform	typeref:typename:Vector3
triangleCount	raylib.h	/^    int triangleCount;      \/\/ Number of triangles stored (indexed or not)$/;"	m	struct:Mesh	typeref:typename:int
type	raylib.h	/^    unsigned int type;              \/\/ Event type (AutomationEventType)$/;"	m	struct:AutomationEvent	typeref:typename:unsigned int
up	raylib.h	/^    Vector3 up;             \/\/ Camera up vector (rotation over its axis)$/;"	m	struct:Camera3D	typeref:typename:Vector3
v	raymath.h	/^    float v[16];$/;"	m	struct:float16	typeref:typename:float[16]
v	raymath.h	/^    float v[3];$/;"	m	struct:float3	typeref:typename:float[3]
vResolution	raylib.h	/^    int vResolution;                \/\/ Vertical resolution in pixels$/;"	m	struct:VrDeviceInfo	typeref:typename:int
vScreenCenter	raylib.h	/^    float vScreenCenter;            \/\/ Screen center in meters$/;"	m	struct:VrDeviceInfo	typeref:typename:float
vScreenSize	raylib.h	/^    float vScreenSize;              \/\/ Vertical size in meters$/;"	m	struct:VrDeviceInfo	typeref:typename:float
value	raylib.h	/^    float value;            \/\/ Material map value$/;"	m	struct:MaterialMap	typeref:typename:float
value	raylib.h	/^    int value;              \/\/ Character value (Unicode)$/;"	m	struct:GlyphInfo	typeref:typename:int
vao	rlgl.h	/^        bool vao;                           \/\/ VAO support (OpenGL ES2 could not support VAO e/;"	m	struct:rlglData::__anon19a7bfac0e08	typeref:typename:bool
vaoId	raylib.h	/^    unsigned int vaoId;     \/\/ OpenGL Vertex Array Object id$/;"	m	struct:Mesh	typeref:typename:unsigned int
vaoId	rlgl.h	/^    unsigned int vaoId;         \/\/ OpenGL Vertex Array Object id$/;"	m	struct:rlVertexBuffer	typeref:typename:unsigned int
vboId	raylib.h	/^    unsigned int *vboId;    \/\/ OpenGL Vertex Buffer Objects id (default vertex data)$/;"	m	struct:Mesh	typeref:typename:unsigned int *
vboId	rlgl.h	/^    unsigned int vboId[4];      \/\/ OpenGL Vertex Buffer Objects id (4 types of vertex data)$/;"	m	struct:rlVertexBuffer	typeref:typename:unsigned int[4]
vertexAlignment	rlgl.h	/^    int vertexAlignment;        \/\/ Number of vertex required for index alignment (LINES, TRIAN/;"	m	struct:rlDrawCall	typeref:typename:int
vertexBuffer	rlgl.h	/^    rlVertexBuffer *vertexBuffer; \/\/ Dynamic buffer(s) for vertex data$/;"	m	struct:rlRenderBatch	typeref:typename:rlVertexBuffer *
vertexCount	raylib.h	/^    int vertexCount;        \/\/ Number of vertices stored in arrays$/;"	m	struct:Mesh	typeref:typename:int
vertexCount	rlgl.h	/^    int vertexCount;            \/\/ Number of vertex of the draw$/;"	m	struct:rlDrawCall	typeref:typename:int
vertexCounter	rlgl.h	/^        int vertexCounter;                  \/\/ Current active render batch vertex counter (gen/;"	m	struct:rlglData::__anon19a7bfac0d08	typeref:typename:int
vertices	raylib.h	/^    float *vertices;        \/\/ Vertex position (XYZ - 3 components per vertex) (shader-locatio/;"	m	struct:Mesh	typeref:typename:float *
vertices	rlgl.h	/^    float *vertices;            \/\/ Vertex position (XYZ - 3 components per vertex) (shader-loc/;"	m	struct:rlVertexBuffer	typeref:typename:float *
viewOffset	raylib.h	/^    Matrix viewOffset[2];           \/\/ VR view offset matrices (per eye)$/;"	m	struct:VrStereoConfig	typeref:typename:Matrix[2]
viewOffsetStereo	rlgl.h	/^        Matrix viewOffsetStereo[2];         \/\/ VR stereo rendering eyes view offset matrices$/;"	m	struct:rlglData::__anon19a7bfac0d08	typeref:typename:Matrix[2]
w	raylib.h	/^    float w;                \/\/ Vector w component$/;"	m	struct:Vector4	typeref:typename:float
w	raymath.h	/^    float w;$/;"	m	struct:Vector4	typeref:typename:float
width	raylib.h	/^    float width;            \/\/ Rectangle width$/;"	m	struct:Rectangle	typeref:typename:float
width	raylib.h	/^    int width;              \/\/ Image base width$/;"	m	struct:Image	typeref:typename:int
width	raylib.h	/^    int width;              \/\/ Texture base width$/;"	m	struct:Texture	typeref:typename:int
x	raylib.h	/^    float x;                \/\/ Rectangle top-left corner position x$/;"	m	struct:Rectangle	typeref:typename:float
x	raylib.h	/^    float x;                \/\/ Vector x component$/;"	m	struct:Vector2	typeref:typename:float
x	raylib.h	/^    float x;                \/\/ Vector x component$/;"	m	struct:Vector3	typeref:typename:float
x	raylib.h	/^    float x;                \/\/ Vector x component$/;"	m	struct:Vector4	typeref:typename:float
x	raymath.h	/^    float x;$/;"	m	struct:Vector2	typeref:typename:float
x	raymath.h	/^    float x;$/;"	m	struct:Vector3	typeref:typename:float
x	raymath.h	/^    float x;$/;"	m	struct:Vector4	typeref:typename:float
y	raylib.h	/^    float y;                \/\/ Rectangle top-left corner position y$/;"	m	struct:Rectangle	typeref:typename:float
y	raylib.h	/^    float y;                \/\/ Vector y component$/;"	m	struct:Vector2	typeref:typename:float
y	raylib.h	/^    float y;                \/\/ Vector y component$/;"	m	struct:Vector3	typeref:typename:float
y	raylib.h	/^    float y;                \/\/ Vector y component$/;"	m	struct:Vector4	typeref:typename:float
y	raymath.h	/^    float y;$/;"	m	struct:Vector2	typeref:typename:float
y	raymath.h	/^    float y;$/;"	m	struct:Vector3	typeref:typename:float
y	raymath.h	/^    float y;$/;"	m	struct:Vector4	typeref:typename:float
z	raylib.h	/^    float z;                \/\/ Vector z component$/;"	m	struct:Vector3	typeref:typename:float
z	raylib.h	/^    float z;                \/\/ Vector z component$/;"	m	struct:Vector4	typeref:typename:float
z	raymath.h	/^    float z;$/;"	m	struct:Vector3	typeref:typename:float
z	raymath.h	/^    float z;$/;"	m	struct:Vector4	typeref:typename:float
zoom	raylib.h	/^    float zoom;             \/\/ Camera zoom (scaling), should be 1.0f by default$/;"	m	struct:Camera2D	typeref:typename:float
